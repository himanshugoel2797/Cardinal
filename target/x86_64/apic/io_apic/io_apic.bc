; ModuleID = 'apic/io_apic/io_apic.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.IOAPIC_Desc = type { i32*, i32, i32, i32 }
%struct.IOAPIC_InterruptMapEntry = type { i32, i32 }

@curIOAPIC_index = internal global i32 0, align 4
@ioapics = internal global [128 x %struct.IOAPIC_Desc] zeroinitializer, align 16
@ioapic_interruptMap = internal global [256 x %struct.IOAPIC_InterruptMapEntry] zeroinitializer, align 16

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @IOAPIC_Initialize(i64 %baseAddr, i32 %global_int_base) #0 {
  %1 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %2 = icmp ugt i32 %1, 127
  br i1 %2, label %26, label %3

; <label>:3                                       ; preds = %0
  %4 = inttoptr i64 %baseAddr to i32*
  %5 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %6, i32 0
  store volatile i32* %4, i32** %7, align 8, !tbaa !5
  %8 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %9, i32 1
  store volatile i32 %global_int_base, i32* %10, align 8, !tbaa !8
  store volatile i32 0, i32* %4, align 4, !tbaa !1
  %11 = getelementptr inbounds i32, i32* %4, i64 4
  %12 = load volatile i32, i32* %11, align 4, !tbaa !1
  %13 = lshr i32 %12, 24
  %14 = and i32 %13, 15
  %15 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %16, i32 2
  store volatile i32 %14, i32* %17, align 4, !tbaa !9
  store volatile i32 1, i32* %4, align 4, !tbaa !1
  %18 = load volatile i32, i32* %11, align 4, !tbaa !1
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 255
  %21 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %22, i32 3
  store volatile i32 %20, i32* %23, align 8, !tbaa !10
  %24 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %25 = add i32 %24, 1
  store volatile i32 %25, i32* @curIOAPIC_index, align 4, !tbaa !1
  br label %26

; <label>:26                                      ; preds = %0, %3
  %.0 = phi i8 [ 0, %3 ], [ -1, %0 ]
  ret i8 %.0
}

; Function Attrs: noredzone nounwind uwtable
define i32 @IOAPIC_Read(i32* nocapture %io_apic_baseAddr, i32 %index) #0 {
  store volatile i32 %index, i32* %io_apic_baseAddr, align 4, !tbaa !1
  %1 = getelementptr inbounds i32, i32* %io_apic_baseAddr, i64 4
  %2 = load volatile i32, i32* %1, align 4, !tbaa !1
  ret i32 %2
}

; Function Attrs: noredzone nounwind uwtable
define void @IOAPIC_Write(i32* nocapture %io_apic_baseAddr, i32 %index, i32 %val) #0 {
  store volatile i32 %index, i32* %io_apic_baseAddr, align 4, !tbaa !1
  %1 = getelementptr inbounds i32, i32* %io_apic_baseAddr, i64 4
  store volatile i32 %val, i32* %1, align 4, !tbaa !1
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @IOAPIC_GetVector(i8 zeroext %global_irq, i8* nocapture %vec) #0 {
  %1 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge.thread, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = zext i8 %global_irq to i32
  br label %5

._crit_edge:                                      ; preds = %21
  %irq_pin.1.lcssa = phi i32 [ %irq_pin.1, %21 ]
  %baseAddr.1.lcssa = phi i32* [ %baseAddr.1, %21 ]
  %4 = icmp eq i32* %baseAddr.1.lcssa, null
  br i1 %4, label %._crit_edge.thread, label %25

; <label>:5                                       ; preds = %.lr.ph, %21
  %irq_pin.03 = phi i32 [ 0, %.lr.ph ], [ %irq_pin.1, %21 ]
  %i.02 = phi i32 [ 0, %.lr.ph ], [ %22, %21 ]
  %baseAddr.01 = phi i32* [ null, %.lr.ph ], [ %baseAddr.1, %21 ]
  %6 = zext i32 %i.02 to i64
  %7 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %6, i32 1
  %8 = load volatile i32, i32* %7, align 8, !tbaa !8
  %9 = icmp ult i32 %3, %8
  br i1 %9, label %21, label %10

; <label>:10                                      ; preds = %5
  %11 = load volatile i32, i32* %7, align 8, !tbaa !8
  %12 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %6, i32 3
  %13 = load volatile i32, i32* %12, align 8, !tbaa !10
  %14 = add i32 %13, %11
  %15 = icmp ult i32 %3, %14
  br i1 %15, label %16, label %21

; <label>:16                                      ; preds = %10
  %17 = load volatile i32, i32* %7, align 8, !tbaa !8
  %18 = sub i32 %3, %17
  %19 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %6, i32 0
  %20 = load volatile i32*, i32** %19, align 8, !tbaa !5
  br label %21

; <label>:21                                      ; preds = %5, %10, %16
  %baseAddr.1 = phi i32* [ %20, %16 ], [ %baseAddr.01, %10 ], [ %baseAddr.01, %5 ]
  %irq_pin.1 = phi i32 [ %18, %16 ], [ %irq_pin.03, %10 ], [ %irq_pin.03, %5 ]
  %22 = add i32 %i.02, 1
  %23 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %5, label %._crit_edge

; <label>:25                                      ; preds = %._crit_edge
  %26 = shl i32 %irq_pin.1.lcssa, 1
  %27 = add i32 %26, 16
  store volatile i32 %27, i32* %baseAddr.1.lcssa, align 4, !tbaa !1
  %28 = getelementptr inbounds i32, i32* %baseAddr.1.lcssa, i64 4
  %29 = load volatile i32, i32* %28, align 4, !tbaa !1
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %vec, align 1, !tbaa !11
  br label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %0, %._crit_edge, %25
  %.0 = phi i8 [ %30, %25 ], [ -1, %._crit_edge ], [ -1, %0 ]
  ret i8 %.0
}

; Function Attrs: noredzone nounwind uwtable
define void @IOAPIC_MapIRQ(i8 zeroext %global_irq, i8 zeroext %apic_vector, i64 %apic_id, i8 zeroext %trigger_mode, i8 zeroext %polarity, i8 zeroext %delivery_mode) #0 {
  %1 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge.thread, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = zext i8 %global_irq to i32
  %4 = zext i8 %apic_vector to i64
  %5 = getelementptr inbounds [256 x %struct.IOAPIC_InterruptMapEntry], [256 x %struct.IOAPIC_InterruptMapEntry]* @ioapic_interruptMap, i64 0, i64 %4, i32 0
  %6 = getelementptr inbounds [256 x %struct.IOAPIC_InterruptMapEntry], [256 x %struct.IOAPIC_InterruptMapEntry]* @ioapic_interruptMap, i64 0, i64 %4, i32 1
  br label %8

._crit_edge:                                      ; preds = %24
  %irq_pin.1.lcssa = phi i32 [ %irq_pin.1, %24 ]
  %baseAddr.1.lcssa = phi i32* [ %baseAddr.1, %24 ]
  %7 = icmp eq i32* %baseAddr.1.lcssa, null
  br i1 %7, label %._crit_edge.thread, label %28

; <label>:8                                       ; preds = %.lr.ph, %24
  %irq_pin.03 = phi i32 [ 0, %.lr.ph ], [ %irq_pin.1, %24 ]
  %baseAddr.02 = phi i32* [ null, %.lr.ph ], [ %baseAddr.1, %24 ]
  %i.01 = phi i32 [ 0, %.lr.ph ], [ %25, %24 ]
  %9 = zext i32 %i.01 to i64
  %10 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %9, i32 1
  %11 = load volatile i32, i32* %10, align 8, !tbaa !8
  %12 = icmp ult i32 %3, %11
  br i1 %12, label %24, label %13

; <label>:13                                      ; preds = %8
  %14 = load volatile i32, i32* %10, align 8, !tbaa !8
  %15 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %9, i32 3
  %16 = load volatile i32, i32* %15, align 8, !tbaa !10
  %17 = add i32 %16, %14
  %18 = icmp ult i32 %3, %17
  br i1 %18, label %19, label %24

; <label>:19                                      ; preds = %13
  %20 = load volatile i32, i32* %10, align 8, !tbaa !8
  %21 = sub i32 %3, %20
  %22 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %9, i32 0
  %23 = load volatile i32*, i32** %22, align 8, !tbaa !5
  store volatile i32 %i.01, i32* %5, align 8, !tbaa !12
  store volatile i32 %21, i32* %6, align 4, !tbaa !14
  br label %24

; <label>:24                                      ; preds = %8, %13, %19
  %baseAddr.1 = phi i32* [ %23, %19 ], [ %baseAddr.02, %13 ], [ %baseAddr.02, %8 ]
  %irq_pin.1 = phi i32 [ %21, %19 ], [ %irq_pin.03, %13 ], [ %irq_pin.03, %8 ]
  %25 = add i32 %i.01, 1
  %26 = load volatile i32, i32* @curIOAPIC_index, align 4, !tbaa !1
  %27 = icmp ult i32 %25, %26
  br i1 %27, label %8, label %._crit_edge

; <label>:28                                      ; preds = %._crit_edge
  %29 = shl i32 %irq_pin.1.lcssa, 1
  %30 = add i32 %29, 16
  %31 = add i32 %29, 17
  store volatile i32 %31, i32* %baseAddr.1.lcssa, align 4, !tbaa !1
  %32 = getelementptr inbounds i32, i32* %baseAddr.1.lcssa, i64 4
  %33 = load volatile i32, i32* %32, align 4, !tbaa !1
  %34 = and i32 %33, 16777215
  %35 = shl i64 %apic_id, 24
  %36 = zext i32 %34 to i64
  %37 = or i64 %36, %35
  %38 = trunc i64 %37 to i32
  store volatile i32 %31, i32* %baseAddr.1.lcssa, align 4, !tbaa !1
  store volatile i32 %38, i32* %32, align 4, !tbaa !1
  store volatile i32 %30, i32* %baseAddr.1.lcssa, align 4, !tbaa !1
  %39 = load volatile i32, i32* %32, align 4, !tbaa !1
  %40 = and i32 %39, -45056
  %41 = zext i8 %polarity to i32
  %42 = shl nuw nsw i32 %41, 13
  %43 = and i32 %42, 8192
  %44 = zext i8 %trigger_mode to i32
  %45 = shl nuw nsw i32 %44, 15
  %46 = and i32 %45, 32768
  %47 = zext i8 %apic_vector to i32
  %48 = zext i8 %delivery_mode to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = and i32 %49, 1792
  %51 = or i32 %46, %47
  %52 = or i32 %51, %43
  %53 = or i32 %52, %50
  %54 = or i32 %53, %40
  store volatile i32 %30, i32* %baseAddr.1.lcssa, align 4, !tbaa !1
  store volatile i32 %54, i32* %32, align 4, !tbaa !1
  br label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %0, %._crit_edge, %28
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @IOAPIC_SetEnableMode(i8 zeroext %vector, i8 zeroext %active) #0 {
  %1 = zext i8 %vector to i64
  %2 = getelementptr inbounds [256 x %struct.IOAPIC_InterruptMapEntry], [256 x %struct.IOAPIC_InterruptMapEntry]* @ioapic_interruptMap, i64 0, i64 %1, i32 0
  %3 = load volatile i32, i32* %2, align 8, !tbaa !12
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %23, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [256 x %struct.IOAPIC_InterruptMapEntry], [256 x %struct.IOAPIC_InterruptMapEntry]* @ioapic_interruptMap, i64 0, i64 %1, i32 1
  %7 = load volatile i32, i32* %6, align 4, !tbaa !14
  %8 = shl i32 %7, 1
  %9 = add i32 %8, 16
  %10 = load volatile i32, i32* %2, align 8, !tbaa !12
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [128 x %struct.IOAPIC_Desc], [128 x %struct.IOAPIC_Desc]* @ioapics, i64 0, i64 %11, i32 0
  %13 = load volatile i32*, i32** %12, align 8, !tbaa !5
  store volatile i32 %9, i32* %13, align 4, !tbaa !1
  %14 = getelementptr inbounds i32, i32* %13, i64 4
  %15 = load volatile i32, i32* %14, align 4, !tbaa !1
  %16 = zext i8 %active to i32
  %17 = and i32 %16, 1
  %18 = xor i32 %17, 1
  %19 = sub nsw i32 0, %18
  %20 = xor i32 %15, %19
  %21 = and i32 %20, 65536
  %22 = xor i32 %21, %15
  store volatile i32 %9, i32* %13, align 4, !tbaa !1
  store volatile i32 %22, i32* %14, align 4, !tbaa !1
  br label %23

; <label>:23                                      ; preds = %0, %5
  ret void
}

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"int", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !7, i64 0}
!6 = !{!"", !7, i64 0, !2, i64 8, !2, i64 12, !2, i64 16}
!7 = !{!"any pointer", !3, i64 0}
!8 = !{!6, !2, i64 8}
!9 = !{!6, !2, i64 12}
!10 = !{!6, !2, i64 16}
!11 = !{!3, !3, i64 0}
!12 = !{!13, !2, i64 0}
!13 = !{!"", !2, i64 0, !2, i64 4}
!14 = !{!13, !2, i64 4}
