; ModuleID = 'rtc/rtc.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.RTC_Time = type { i8, i8, i8, i8, i8, i16, i8 }

@century_register = global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"FACP\00", align 1

; Function Attrs: noredzone nounwind uwtable
define void @RTC_Initialize() #0 {
  %1 = tail call i8* @ACPITables_FindTable(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 0) #2
  %2 = icmp eq i8* %1, null
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8, i8* %1, i64 108
  %5 = load i8, i8* %4, align 1, !tbaa !1
  %6 = zext i8 %5 to i32
  store i32 %6, i32* @century_register, align 4, !tbaa !10
  br label %7

; <label>:7                                       ; preds = %0, %3
  ret void
}

; Function Attrs: noredzone
declare i8* @ACPITables_FindTable(i8*, i32) #1

; Function Attrs: noredzone nounwind uwtable
define void @RTC_SelectRegister(i8 zeroext %nmi_disabled, i8 zeroext %cmos_reg) #0 {
  %1 = shl i8 %nmi_disabled, 7
  %2 = or i8 %1, %cmos_reg
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 %2) #3, !srcloc !11
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @RTC_SetRegister(i8 zeroext %regVal, i8 zeroext %nmi_disabled, i8 zeroext %cmos_reg) #0 {
  %1 = shl i8 %nmi_disabled, 7
  %2 = or i8 %1, %cmos_reg
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 %2) #3, !srcloc !11
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 113, i8 %regVal) #3, !srcloc !11
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @RTC_GetRegister(i8 zeroext %nmi_disabled, i8 zeroext %cmos_reg) #0 {
  %1 = shl i8 %nmi_disabled, 7
  %2 = or i8 %1, %cmos_reg
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 %2) #3, !srcloc !11
  %3 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  ret i8 %3
}

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @RTC_UpdateInProgress() #0 {
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -118) #3, !srcloc !11
  %1 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %2 = and i8 %1, -128
  ret i8 %2
}

; Function Attrs: noredzone nounwind uwtable
define void @RTC_GetRTCTime(%struct.RTC_Time* nocapture %rtc) #0 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -118) #3, !srcloc !11
  %2 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %3 = icmp sgt i8 %2, -1
  br i1 %3, label %4, label %1

; <label>:4                                       ; preds = %1
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -128) #3, !srcloc !11
  %5 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -126) #3, !srcloc !11
  %6 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -124) #3, !srcloc !11
  %7 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -121) #3, !srcloc !11
  %8 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -120) #3, !srcloc !11
  %9 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -119) #3, !srcloc !11
  %10 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %11 = load i32, i32* @century_register, align 4, !tbaa !10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %.critedge.preheader, label %13

; <label>:13                                      ; preds = %4
  %14 = trunc i32 %11 to i8
  %15 = or i8 %14, -128
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 %15) #3, !srcloc !11
  %16 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  br label %.critedge.preheader

.critedge.preheader:                              ; preds = %13, %4
  %century.0.ph = phi i8 [ %16, %13 ], [ 0, %4 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.backedge, %.critedge.preheader
  %century.0 = phi i8 [ %century.0.ph, %.critedge.preheader ], [ %century.1, %.critedge.backedge ]
  %year.0 = phi i8 [ %10, %.critedge.preheader ], [ %26, %.critedge.backedge ]
  %month.0 = phi i8 [ %9, %.critedge.preheader ], [ %25, %.critedge.backedge ]
  %day.0 = phi i8 [ %8, %.critedge.preheader ], [ %24, %.critedge.backedge ]
  %hour.0 = phi i8 [ %7, %.critedge.preheader ], [ %23, %.critedge.backedge ]
  %minute.0 = phi i8 [ %6, %.critedge.preheader ], [ %22, %.critedge.backedge ]
  %second.0 = phi i8 [ %5, %.critedge.preheader ], [ %21, %.critedge.backedge ]
  br label %17

; <label>:17                                      ; preds = %17, %.critedge
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -118) #3, !srcloc !11
  %18 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %19 = icmp sgt i8 %18, -1
  br i1 %19, label %20, label %17

; <label>:20                                      ; preds = %17
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -128) #3, !srcloc !11
  %21 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -126) #3, !srcloc !11
  %22 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -124) #3, !srcloc !11
  %23 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -121) #3, !srcloc !11
  %24 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -120) #3, !srcloc !11
  %25 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -119) #3, !srcloc !11
  %26 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %27 = load i32, i32* @century_register, align 4, !tbaa !10
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

; <label>:29                                      ; preds = %20
  %30 = trunc i32 %27 to i8
  %31 = or i8 %30, -128
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 %31) #3, !srcloc !11
  %32 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  br label %33

; <label>:33                                      ; preds = %20, %29
  %century.1 = phi i8 [ %32, %29 ], [ %century.0, %20 ]
  %34 = icmp eq i8 %second.0, %21
  %35 = icmp eq i8 %minute.0, %22
  %or.cond = and i1 %34, %35
  %36 = icmp eq i8 %hour.0, %23
  %or.cond11 = and i1 %or.cond, %36
  %37 = icmp eq i8 %day.0, %24
  %or.cond12 = and i1 %or.cond11, %37
  %38 = icmp eq i8 %month.0, %25
  %or.cond13 = and i1 %or.cond12, %38
  br i1 %or.cond13, label %39, label %.critedge.backedge

.critedge.backedge:                               ; preds = %33, %39
  br label %.critedge

; <label>:39                                      ; preds = %33
  %40 = icmp eq i8 %year.0, %26
  %41 = icmp eq i8 %century.0, %century.1
  %or.cond14 = and i1 %40, %41
  br i1 %or.cond14, label %42, label %.critedge.backedge

; <label>:42                                      ; preds = %39
  %second.0.lcssa = phi i8 [ %second.0, %39 ]
  %minute.0.lcssa = phi i8 [ %minute.0, %39 ]
  %hour.0.lcssa = phi i8 [ %hour.0, %39 ]
  %day.0.lcssa = phi i8 [ %day.0, %39 ]
  %month.0.lcssa = phi i8 [ %month.0, %39 ]
  %year.0.lcssa = phi i8 [ %year.0, %39 ]
  %century.0.lcssa = phi i8 [ %century.0, %39 ]
  %43 = zext i8 %year.0.lcssa to i16
  tail call void asm sideeffect "outb $1, $0", "{dx}N,{ax},~{dirflag},~{fpsr},~{flags}"(i16 112, i8 -117) #3, !srcloc !11
  %44 = tail call i8 asm sideeffect "inb $1, $0", "={ax},{dx}N,~{dirflag},~{fpsr},~{flags}"(i16 113) #3, !srcloc !12
  %45 = zext i8 %44 to i32
  %46 = and i32 %45, 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %78

; <label>:48                                      ; preds = %42
  %49 = and i8 %second.0.lcssa, 15
  %div = lshr i8 %second.0.lcssa, 4
  %50 = mul nuw i8 %div, 10
  %51 = add i8 %50, %49
  %52 = and i8 %minute.0.lcssa, 15
  %div6 = lshr i8 %minute.0.lcssa, 4
  %53 = mul nuw i8 %div6, 10
  %54 = add i8 %53, %52
  %55 = and i8 %hour.0.lcssa, 15
  %56 = lshr i8 %hour.0.lcssa, 4
  %57 = and i8 %56, 7
  %58 = mul nuw nsw i8 %57, 10
  %59 = add nuw i8 %58, %55
  %60 = and i8 %hour.0.lcssa, -128
  %61 = or i8 %59, %60
  %62 = and i8 %day.0.lcssa, 15
  %div7 = lshr i8 %day.0.lcssa, 4
  %63 = mul nuw i8 %div7, 10
  %64 = add i8 %63, %62
  %65 = and i8 %month.0.lcssa, 15
  %div8 = lshr i8 %month.0.lcssa, 4
  %66 = mul nuw i8 %div8, 10
  %67 = add i8 %66, %65
  %68 = and i16 %43, 15
  %div9 = lshr i8 %year.0.lcssa, 4
  %69 = zext i8 %div9 to i16
  %70 = mul nuw nsw i16 %69, 10
  %71 = add nuw nsw i16 %70, %68
  %72 = load i32, i32* @century_register, align 4, !tbaa !10
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

; <label>:74                                      ; preds = %48
  %75 = and i8 %century.0.lcssa, 15
  %div10 = lshr i8 %century.0.lcssa, 4
  %76 = mul nuw i8 %div10, 10
  %77 = add i8 %76, %75
  br label %78

; <label>:78                                      ; preds = %48, %42, %74
  %century.2 = phi i8 [ %century.0.lcssa, %42 ], [ %77, %74 ], [ %century.0.lcssa, %48 ]
  %year.1 = phi i16 [ %43, %42 ], [ %71, %74 ], [ %71, %48 ]
  %month.1 = phi i8 [ %month.0.lcssa, %42 ], [ %67, %74 ], [ %67, %48 ]
  %day.1 = phi i8 [ %day.0.lcssa, %42 ], [ %64, %74 ], [ %64, %48 ]
  %hour.1 = phi i8 [ %hour.0.lcssa, %42 ], [ %61, %74 ], [ %61, %48 ]
  %minute.1 = phi i8 [ %minute.0.lcssa, %42 ], [ %54, %74 ], [ %54, %48 ]
  %second.1 = phi i8 [ %second.0.lcssa, %42 ], [ %51, %74 ], [ %51, %48 ]
  %79 = and i32 %45, 2
  %80 = icmp ne i32 %79, 0
  %81 = icmp sgt i8 %hour.1, -1
  %or.cond15 = or i1 %80, %81
  br i1 %or.cond15, label %86, label %82

; <label>:82                                      ; preds = %78
  %83 = and i8 %hour.1, 127
  %84 = add nuw i8 %83, 12
  %85 = urem i8 %84, 24
  br label %86

; <label>:86                                      ; preds = %78, %82
  %hour.2 = phi i8 [ %hour.1, %78 ], [ %85, %82 ]
  %87 = load i32, i32* @century_register, align 4, !tbaa !10
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

; <label>:89                                      ; preds = %86
  %90 = zext i8 %century.2 to i16
  %91 = mul nuw nsw i16 %90, 100
  %92 = add i16 %91, %year.1
  br label %97

; <label>:93                                      ; preds = %86
  %94 = add nsw i16 %year.1, 2000
  %95 = icmp ult i16 %94, 2016
  %96 = add nsw i16 %year.1, 2100
  %. = select i1 %95, i16 %96, i16 %94
  br label %97

; <label>:97                                      ; preds = %93, %89
  %year.2 = phi i16 [ %92, %89 ], [ %., %93 ]
  %98 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 0
  store i8 %second.1, i8* %98, align 1, !tbaa !13
  %99 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 1
  store i8 %minute.1, i8* %99, align 1, !tbaa !15
  %100 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 2
  store i8 %hour.2, i8* %100, align 1, !tbaa !16
  %101 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 3
  store i8 %day.1, i8* %101, align 1, !tbaa !17
  %102 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 4
  store i8 %month.1, i8* %102, align 1, !tbaa !18
  %103 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 5
  store i16 %year.2, i16* %103, align 2, !tbaa !19
  %104 = getelementptr inbounds %struct.RTC_Time, %struct.RTC_Time* %rtc, i64 0, i32 6
  store i8 %century.2, i8* %104, align 1, !tbaa !20
  ret void
}

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin noredzone nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !4, i64 108}
!2 = !{!"", !3, i64 0, !6, i64 36, !6, i64 40, !4, i64 44, !4, i64 45, !7, i64 46, !6, i64 48, !4, i64 52, !4, i64 53, !4, i64 54, !4, i64 55, !6, i64 56, !6, i64 60, !6, i64 64, !6, i64 68, !6, i64 72, !6, i64 76, !6, i64 80, !6, i64 84, !4, i64 88, !4, i64 89, !4, i64 90, !4, i64 91, !4, i64 92, !4, i64 93, !4, i64 94, !4, i64 95, !7, i64 96, !7, i64 98, !7, i64 100, !7, i64 102, !4, i64 104, !4, i64 105, !4, i64 106, !4, i64 107, !4, i64 108, !7, i64 110, !4, i64 112, !6, i64 116, !8, i64 120, !4, i64 132, !4, i64 133, !9, i64 136, !9, i64 144, !8, i64 152, !8, i64 164, !8, i64 176, !8, i64 188, !8, i64 200, !8, i64 212, !8, i64 224, !8, i64 236}
!3 = !{!"", !4, i64 0, !6, i64 4, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 16, !6, i64 24, !6, i64 28, !6, i64 32}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!"int", !4, i64 0}
!7 = !{!"short", !4, i64 0}
!8 = !{!"", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !9, i64 4}
!9 = !{!"long", !4, i64 0}
!10 = !{!6, !6, i64 0}
!11 = !{i32 54934}
!12 = !{i32 55070}
!13 = !{!14, !4, i64 0}
!14 = !{!"", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !7, i64 6, !4, i64 8}
!15 = !{!14, !4, i64 1}
!16 = !{!14, !4, i64 2}
!17 = !{!14, !4, i64 3}
!18 = !{!14, !4, i64 4}
!19 = !{!14, !7, i64 6}
!20 = !{!14, !4, i64 8}
