; ModuleID = 'hal/syscall.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.CoreKernelStackInfo = type { i8*, i64 }

@k_stack_info = internal unnamed_addr global %struct.CoreKernelStackInfo* null, align 8

; Function Attrs: naked noinline noredzone noreturn nounwind uwtable
define void @Syscall_Handler() #0 {
  tail call void asm sideeffect "pushq %rax\0A\09movq %rsp, %rax\0A\09movq (k_stack_info), %rsp\0A\09movq %r11, +8(%rsp)\0A\09movq (%rsp), %rsp\0A\09pushq %rax\0A\09pushq %rcx\0A\09pushq %rdi\0A\09xchg %rcx, %rdi\0A\09callq (SyscallReceived)\0A\09movq %rax, %rsi\0A\09popq %rdi\0A\09popq %rcx\0A\09popq %rax\0A\09movq %rax, %rsp\0A\09popq %rax\0A\09movq (k_stack_info), %r11\0A\09movq +8(%r11), %r11\0A\09sysretq\0A\09", "~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !1
  unreachable
}

; Function Attrs: noredzone nounwind uwtable
define void @SwitchToUserMode(i64 %pc, i64 %sp) #1 {
  tail call void asm sideeffect "cli\0A\09pushfq\0A\09popq %r11\0A\09orq $$512, %r11\0A\09mov %rax, %rsp\0A\09mov %rsp, %rbp\0A\09sysretq\0A\09", "{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i64 %sp, i64 %pc) #3, !srcloc !2
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @SetKernelStack(i8* %stack) #1 {
  %1 = load %struct.CoreKernelStackInfo*, %struct.CoreKernelStackInfo** @k_stack_info, align 8, !tbaa !3
  %2 = icmp eq %struct.CoreKernelStackInfo* %1, null
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @AllocateAPLSMemory(i64 8) #4
  store i8* %4, i8** bitcast (%struct.CoreKernelStackInfo** @k_stack_info to i8**), align 8, !tbaa !3
  %5 = bitcast i8* %4 to %struct.CoreKernelStackInfo*
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = phi %struct.CoreKernelStackInfo* [ %5, %3 ], [ %1, %0 ]
  %8 = getelementptr inbounds %struct.CoreKernelStackInfo, %struct.CoreKernelStackInfo* %7, i64 0, i32 0
  store volatile i8* %stack, i8** %8, align 8, !tbaa !7
  ret void
}

; Function Attrs: noredzone
declare i8* @AllocateAPLSMemory(i64) #2

; Function Attrs: noredzone nounwind uwtable
define i64 @GetRFLAGS() #1 {
  %1 = load %struct.CoreKernelStackInfo*, %struct.CoreKernelStackInfo** @k_stack_info, align 8, !tbaa !3
  %2 = getelementptr inbounds %struct.CoreKernelStackInfo, %struct.CoreKernelStackInfo* %1, i64 0, i32 1
  %3 = load volatile i64, i64* %2, align 8, !tbaa !10
  ret i64 %3
}

; Function Attrs: noredzone nounwind uwtable
define void @SetRFLAGS(i64 %val) #1 {
  %1 = load %struct.CoreKernelStackInfo*, %struct.CoreKernelStackInfo** @k_stack_info, align 8, !tbaa !3
  %2 = getelementptr inbounds %struct.CoreKernelStackInfo, %struct.CoreKernelStackInfo* %1, i64 0, i32 1
  store volatile i64 %val, i64* %2, align 8, !tbaa !10
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @Syscall_Initialize() #1 {
  %1 = tail call { i32, i32 } asm sideeffect "rdmsr", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -1073741696) #3, !srcloc !11
  %2 = extractvalue { i32, i32 } %1, 0
  %3 = extractvalue { i32, i32 } %1, 1
  %4 = or i32 %2, 1
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 %4, i32 %3, i32 -1073741696) #3, !srcloc !12
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 1572872, i32 -1073741695) #3, !srcloc !12
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 ptrtoint (void ()* @Syscall_Handler to i32), i32 trunc (i64 lshr (i64 ptrtoint (void ()* @Syscall_Handler to i64), i64 32) to i32), i32 -1073741694) #3, !srcloc !12
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0, i32 -1073741693) #3, !srcloc !12
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 512, i32 0, i32 -1073741692) #3, !srcloc !12
  ret void
}

attributes #0 = { naked noinline noredzone noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nobuiltin noredzone nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 438, i32 452, i32 484, i32 525, i32 561, i32 595, i32 621, i32 647, i32 673, i32 705, i32 743, i32 775, i32 800, i32 825, i32 850, i32 882, i32 907, i32 948, i32 984, i32 1006}
!2 = !{i32 1109, i32 1115, i32 1136, i32 1161, i32 1191, i32 1222, i32 1253, i32 1275}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"CoreKernelStackInfo", !4, i64 0, !9, i64 8}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{i32 49343}
!12 = !{i32 49198}
