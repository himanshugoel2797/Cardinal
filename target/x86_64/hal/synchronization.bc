; ModuleID = 'hal/synchronization.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

; Function Attrs: noredzone nounwind uwtable
define i64* @CreateSpinlock() #0 {
  %1 = tail call i32 @CPUID_GetCacheLineSize() #2
  %2 = zext i32 %1 to i64
  %3 = tail call i8* @kmalloc(i64 %2) #2
  %4 = bitcast i8* %3 to i64*
  %5 = tail call i32 @CPUID_GetCacheLineSize() #2
  %6 = zext i32 %5 to i64
  %7 = tail call i8* @memset(i8* %3, i32 0, i64 %6) #2
  %8 = load i64, i64* %4, align 8, !tbaa !1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %12, label %10

; <label>:10                                      ; preds = %0
  %11 = tail call i32 @CPUID_GetCacheLineSize() #2
  tail call void asm sideeffect "cli\0A\09hlt", "{ax},~{dirflag},~{fpsr},~{flags}"(i32 %11) #3, !srcloc !5
  br label %12

; <label>:12                                      ; preds = %0, %10
  ret i64* %4
}

; Function Attrs: noredzone
declare i8* @kmalloc(i64) #1

; Function Attrs: noredzone
declare i32 @CPUID_GetCacheLineSize() #1

; Function Attrs: noredzone
declare i8* @memset(i8*, i32, i64) #1

; Function Attrs: noredzone nounwind uwtable
define i64* @CreateBootstrapSpinlock() #0 {
  %1 = tail call i32 @CPUID_GetCacheLineSize() #2
  %2 = zext i32 %1 to i64
  %3 = tail call i8* @bootstrap_malloc(i64 %2) #2
  %4 = bitcast i8* %3 to i64*
  %5 = tail call i32 @CPUID_GetCacheLineSize() #2
  %6 = zext i32 %5 to i64
  %7 = tail call i8* @memset(i8* %3, i32 0, i64 %6) #2
  ret i64* %4
}

; Function Attrs: noredzone
declare i8* @bootstrap_malloc(i64) #1

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @LockSpinlock(i64* %primitive) #0 {
  %1 = icmp eq i64* %primitive, null
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  tail call void asm sideeffect "pushq %rdx\0A\09popq %rdx\0A\09add $$0x10, %rsp\0A\09popq %rdx\0A\09popq %rdx\0A\09add $$0x20, %rsp\0A\09popq %rdx\0A\09popq %rdx\0A\09sub $$0x30, %rsp\0A\09sub $$0x28, %rsp\0A\09mfence\0A\09pushq %rcx\0A\09pushfq\0A\09cli\0A\09popq %rcx\0A\09shlq $$16, %rcx\0A\09movw $$1, %cx\0A\09lock xaddw %cx, +2($0)\0A\09cmpw %cx, ($0)\0A\09je 3f\0A\091:\0A\09btq $$25, %rcx\0A\09jnc 2f\0A\092:pause\0A\09cmpw %cx, ($0)\0A\09jne 1b\0A\093:\0A\09btq $$25, %rcx\0A\09jnc 4f\0A\09orw $$1, +4($0)\0A\094:\0A\09cli\0A\09popq %rcx\0A\09popq %rdx\0A\09", "r,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %primitive) #3, !srcloc !6
  br label %3

; <label>:3                                       ; preds = %0, %2
  %.0 = phi i8 [ 1, %2 ], [ 0, %0 ]
  ret i8 %.0
}

; Function Attrs: noredzone nounwind uwtable
define i64 @GetSpinlockContenderCount(i64* %primitive) #0 {
  %1 = tail call i64 asm sideeffect "movq (%rax), %rax\0A\09", "={ax},{ax},~{dirflag},~{fpsr},~{flags}"(i64* %primitive) #3, !srcloc !7
  %2 = lshr i64 %1, 16
  %3 = and i64 %2, 65535
  %4 = and i64 %1, 65535
  %5 = sub nsw i64 %3, %4
  ret i64 %5
}

; Function Attrs: noredzone nounwind uwtable
define zeroext i8 @UnlockSpinlock(i64* %primitive) #0 {
  %1 = icmp eq i64* %primitive, null
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  tail call void asm sideeffect "mfence\0A\09lock incw ($0)\0A\09btw $$0, +4($0)\0A\09jnc .unlock_skip_sti\0A\09sti\0A\09movw $$0, +4($0)\0A\09.unlock_skip_sti:\0A\09", "r,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %primitive) #3, !srcloc !8
  br label %3

; <label>:3                                       ; preds = %0, %2
  %.0 = phi i8 [ 1, %2 ], [ 0, %0 ]
  ret i8 %.0
}

; Function Attrs: noredzone nounwind uwtable
define void @FreeSpinlock(i64* %primitive) #0 {
  %1 = icmp eq i64* %primitive, null
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = bitcast i64* %primitive to i8*
  tail call void @kfree(i8* %3) #2
  br label %4

; <label>:4                                       ; preds = %0, %2
  ret void
}

; Function Attrs: noredzone
declare void @kfree(i8*) #1

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin noredzone nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{i32 282, i32 288}
!6 = !{i32 635, i32 649, i32 674, i32 705, i32 730, i32 755, i32 786, i32 811, i32 836, i32 867, i32 898, i32 919, i32 945, i32 966, i32 984, i32 1009, i32 1039, i32 1067, i32 1110, i32 1145, i32 1165, i32 1182, i32 1211, i32 1232, i32 1265, i32 1300, i32 1321, i32 1338, i32 1367, i32 1388, i32 1422, i32 1439, i32 1457, i32 1482, i32 1507}
!7 = !{i32 1695, i32 1717}
!8 = !{i32 1964, i32 1973, i32 2002, i32 2031, i32 2066, i32 2084, i32 2114, i32 2146}
