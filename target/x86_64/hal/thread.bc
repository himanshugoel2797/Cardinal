; ModuleID = 'hal/thread.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.ThreadInfo = type { i64, i64, %struct.ProcessInformation*, void ()*, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i64, i8*, i8*, i8*, i8*, i64* }
%struct.ProcessInformation = type { i64, [256 x i8], i32, i32, i32, [22 x void (i32)*], i64, %struct.MemoryAllocationsMap*, %struct.List*, i32, i64* }
%struct.MemoryAllocationsMap = type { i32, i64, i64, i64, i32, i32, i64, i64, %struct.MemoryAllocationsMap* }
%struct.List = type opaque

; Function Attrs: noredzone nounwind uwtable
define void @SwitchAndInitializeThread(%struct.ThreadInfo* nocapture readonly %cur_thread) #0 {
  %1 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %cur_thread, i64 0, i32 3
  %2 = load void ()*, void ()** %1, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %cur_thread, i64 0, i32 13
  %4 = load i64, i64* %3, align 8, !tbaa !8
  tail call void asm sideeffect "mov %rbx, %rsp\0A\09pushq %rax\0A\09mov $$0, %rax\0A\09mov $$0, %rbx\0A\09mov $$0, %rcx\0A\09mov $$0, %rdx\0A\09mov $$0, %rsi\0A\09mov $$0, %rdi\0A\09mov $$0, %r8\0A\09mov $$0, %r9\0A\09mov $$0, %r10\0A\09mov $$0, %r11\0A\09mov $$0, %r12\0A\09mov $$0, %r13\0A\09mov $$0, %r14\0A\09mov $$0, %r15\0A\09sti\0A\09retq", "{ax},{bx},~{dirflag},~{fpsr},~{flags}"(void ()* %2, i64 %4) #2, !srcloc !9
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @SavePreviousThread(%struct.ThreadInfo* %src) #0 {
  %1 = tail call i8* @GetSavedInterruptState() #3
  %2 = icmp eq %struct.ThreadInfo* %src, null
  br i1 %2, label %12, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %src, i64 0, i32 22
  %5 = load i64*, i64** %4, align 8, !tbaa !10
  %6 = tail call zeroext i8 @LockSpinlock(i64* %5) #3
  %7 = bitcast i8* %1 to i64*
  %8 = load i64, i64* %7, align 1, !tbaa !11
  %9 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %src, i64 0, i32 12
  store i64 %8, i64* %9, align 8, !tbaa !13
  %10 = load i64*, i64** %4, align 8, !tbaa !10
  %11 = tail call zeroext i8 @UnlockSpinlock(i64* %10) #3
  br label %12

; <label>:12                                      ; preds = %0, %3
  ret void
}

; Function Attrs: noredzone
declare i8* @GetSavedInterruptState() #1

; Function Attrs: noredzone
declare zeroext i8 @LockSpinlock(i64*) #1

; Function Attrs: noredzone
declare zeroext i8 @UnlockSpinlock(i64*) #1

; Function Attrs: noredzone nounwind uwtable
define void @SwitchToThread(%struct.ThreadInfo* nocapture readonly %dst) #0 {
  %1 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %dst, i64 0, i32 22
  %2 = load i64*, i64** %1, align 8, !tbaa !10
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #3
  %4 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %dst, i64 0, i32 12
  %5 = load i64, i64* %4, align 8, !tbaa !13
  %6 = load i64*, i64** %1, align 8, !tbaa !10
  %7 = tail call zeroext i8 @UnlockSpinlock(i64* %6) #3
  tail call void asm sideeffect "movq $0, %rsp\0A\09popq %r15\0A\09popq %r14\0A\09popq %r13\0A\09popq %r12\0A\09popq %r11\0A\09popq %r10\0A\09popq %r9\0A\09popq %r8\0A\09popq %rdi\0A\09popq %rsi\0A\09popq %rbp\0A\09popq %rdx\0A\09popq %rcx\0A\09popq %rbx\0A\09popq %rax\0A\09add $$16, %rsp\0A\09iretq\0A\09", "r,~{dirflag},~{fpsr},~{flags}"(i64 %5) #2, !srcloc !14
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @SetFSBase(i8* %base) #0 {
  %1 = ptrtoint i8* %base to i64
  %2 = trunc i64 %1 to i32
  %3 = lshr i64 %1, 32
  %4 = trunc i64 %3 to i32
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 %2, i32 %4, i32 -1073741568) #2, !srcloc !15
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @SetGSBase(i8* %base) #0 {
  %1 = ptrtoint i8* %base to i64
  %2 = trunc i64 %1 to i32
  %3 = lshr i64 %1, 32
  %4 = trunc i64 %3 to i32
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 %2, i32 %4, i32 -1073741567) #2, !srcloc !15
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define i8* @GetFSBase() #0 {
  %1 = tail call { i32, i32 } asm sideeffect "rdmsr", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -1073741568) #2, !srcloc !16
  %2 = extractvalue { i32, i32 } %1, 0
  %3 = extractvalue { i32, i32 } %1, 1
  %4 = zext i32 %3 to i64
  %5 = shl nuw i64 %4, 32
  %6 = zext i32 %2 to i64
  %7 = or i64 %5, %6
  %8 = inttoptr i64 %7 to i8*
  ret i8* %8
}

; Function Attrs: noredzone nounwind uwtable
define i8* @GetGSBase() #0 {
  %1 = tail call { i32, i32 } asm sideeffect "rdmsr", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -1073741567) #2, !srcloc !16
  %2 = extractvalue { i32, i32 } %1, 0
  %3 = extractvalue { i32, i32 } %1, 1
  %4 = zext i32 %3 to i64
  %5 = shl nuw i64 %4, 32
  %6 = zext i32 %2 to i64
  %7 = or i64 %5, %6
  %8 = inttoptr i64 %7 to i8*
  ret i8* %8
}

; Function Attrs: noredzone nounwind uwtable
define void @PerformArchSpecificTaskSave(%struct.ThreadInfo* nocapture readonly %tInfo) #0 {
  %1 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %tInfo, i64 0, i32 21
  %2 = bitcast i8** %1 to i64**
  %3 = load i64*, i64** %2, align 8, !tbaa !17
  %4 = tail call { i32, i32 } asm sideeffect "rdmsr", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -1073741568) #2, !srcloc !16
  %5 = extractvalue { i32, i32 } %4, 0
  %6 = extractvalue { i32, i32 } %4, 1
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = zext i32 %5 to i64
  %10 = or i64 %8, %9
  store i64 %10, i64* %3, align 8, !tbaa !18
  %11 = tail call { i32, i32 } asm sideeffect "rdmsr", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -1073741567) #2, !srcloc !16
  %12 = extractvalue { i32, i32 } %11, 0
  %13 = extractvalue { i32, i32 } %11, 1
  %14 = zext i32 %13 to i64
  %15 = shl nuw i64 %14, 32
  %16 = zext i32 %12 to i64
  %17 = or i64 %15, %16
  %18 = getelementptr inbounds i64, i64* %3, i64 1
  store i64 %17, i64* %18, align 8, !tbaa !18
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @PerformArchSpecificTaskSwitch(%struct.ThreadInfo* nocapture readonly %tInfo) #0 {
  %1 = getelementptr inbounds %struct.ThreadInfo, %struct.ThreadInfo* %tInfo, i64 0, i32 21
  %2 = bitcast i8** %1 to i64**
  %3 = load i64*, i64** %2, align 8, !tbaa !17
  %4 = load i64, i64* %3, align 8, !tbaa !18
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 %5, i32 %7, i32 -1073741568) #2, !srcloc !15
  %8 = getelementptr inbounds i64, i64* %3, i64 1
  %9 = load i64, i64* %8, align 8, !tbaa !18
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %9, 32
  %12 = trunc i64 %11 to i32
  tail call void asm sideeffect "wrmsr", "{ax},{dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 %10, i32 %12, i32 -1073741567) #2, !srcloc !15
  ret void
}

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nobuiltin noredzone nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !6, i64 24}
!2 = !{!"ThreadInfo", !3, i64 0, !3, i64 8, !6, i64 16, !6, i64 24, !4, i64 32, !4, i64 36, !4, i64 40, !3, i64 48, !3, i64 56, !3, i64 64, !3, i64 72, !3, i64 80, !3, i64 88, !3, i64 96, !3, i64 104, !7, i64 112, !3, i64 120, !3, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!"any pointer", !4, i64 0}
!7 = !{!"int", !4, i64 0}
!8 = !{!2, !3, i64 96}
!9 = !{i32 235, i32 254, i32 280, i32 308, i32 336, i32 364, i32 392, i32 420, i32 448, i32 475, i32 502, i32 530, i32 558, i32 586, i32 614, i32 642, i32 670, i32 688}
!10 = !{!2, !6, i64 168}
!11 = !{!12, !3, i64 0}
!12 = !{!"", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !3, i64 56, !3, i64 64, !3, i64 72, !3, i64 80, !3, i64 88, !3, i64 96, !3, i64 104, !3, i64 112, !3, i64 120, !3, i64 128, !3, i64 136, !3, i64 144, !3, i64 152, !3, i64 160, !3, i64 168, !3, i64 176}
!13 = !{!2, !3, i64 88}
!14 = !{i32 1211, i32 1228, i32 1266, i32 1304, i32 1342, i32 1380, i32 1418, i32 1456, i32 1493, i32 1530, i32 1568, i32 1606, i32 1644, i32 1682, i32 1720, i32 1758, i32 1796, i32 1838, i32 1871}
!15 = !{i32 67776}
!16 = !{i32 67921}
!17 = !{!2, !6, i64 160}
!18 = !{!3, !3, i64 0}
