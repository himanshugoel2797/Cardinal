; ModuleID = 'common/list.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.List = type { %struct.ListNode*, %struct.ListNode*, %struct.ListNode*, i64, i64, i64* }
%struct.ListNode = type { i8*, %struct.ListNode*, %struct.ListNode* }

; Function Attrs: noredzone nounwind uwtable
define %struct.List* @List_Create(i64* %spin) #0 {
  %1 = tail call i8* @kmalloc(i64 48) #2
  %2 = bitcast i8* %1 to %struct.List*
  %3 = tail call zeroext i8 @LockSpinlock(i64* %spin) #2
  %4 = bitcast i8* %1 to %struct.ListNode**
  store %struct.ListNode* null, %struct.ListNode** %4, align 8, !tbaa !1
  %5 = getelementptr inbounds i8, i8* %1, i64 8
  %6 = bitcast i8* %5 to %struct.ListNode**
  store %struct.ListNode* null, %struct.ListNode** %6, align 8, !tbaa !7
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to %struct.ListNode**
  store %struct.ListNode* null, %struct.ListNode** %8, align 8, !tbaa !8
  %9 = getelementptr inbounds i8, i8* %1, i64 24
  %10 = bitcast i8* %9 to i64*
  store i64 0, i64* %10, align 8, !tbaa !9
  %11 = getelementptr inbounds i8, i8* %1, i64 32
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 8, !tbaa !10
  %13 = getelementptr inbounds i8, i8* %1, i64 40
  %14 = bitcast i8* %13 to i64**
  store i64* %spin, i64** %14, align 8, !tbaa !11
  %15 = tail call zeroext i8 @UnlockSpinlock(i64* %spin) #2
  ret %struct.List* %2
}

; Function Attrs: noredzone
declare i8* @kmalloc(i64) #1

; Function Attrs: noredzone
declare zeroext i8 @LockSpinlock(i64*) #1

; Function Attrs: noredzone
declare zeroext i8 @UnlockSpinlock(i64*) #1

; Function Attrs: noredzone nounwind uwtable
define i32 @List_AddEntry(%struct.List* nocapture %a, i8* %value) #0 {
  %1 = tail call i8* @kmalloc(i64 24) #2
  %2 = icmp eq i8* %1, null
  br i1 %2, label %43, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %5 = load i64*, i64** %4, align 8, !tbaa !11
  %6 = tail call zeroext i8 @LockSpinlock(i64* %5) #2
  %7 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 1
  %8 = bitcast %struct.ListNode** %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !7
  %10 = getelementptr inbounds i8, i8* %1, i64 16
  %11 = bitcast i8* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !12
  %12 = bitcast i8* %1 to i8**
  store i8* %value, i8** %12, align 8, !tbaa !14
  %13 = getelementptr inbounds i8, i8* %1, i64 8
  %14 = bitcast i8* %13 to %struct.ListNode**
  store %struct.ListNode* null, %struct.ListNode** %14, align 8, !tbaa !15
  %15 = icmp eq i64 %9, 0
  br i1 %15, label %20, label %16

; <label>:16                                      ; preds = %3
  %17 = inttoptr i64 %9 to %struct.ListNode*
  %18 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %17, i64 0, i32 1
  %19 = bitcast %struct.ListNode** %18 to i8**
  store i8* %1, i8** %19, align 8, !tbaa !15
  br label %20

; <label>:20                                      ; preds = %3, %16
  %21 = bitcast %struct.ListNode** %7 to i8**
  store i8* %1, i8** %21, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 0
  %23 = load %struct.ListNode*, %struct.ListNode** %22, align 8, !tbaa !1
  %24 = icmp eq %struct.ListNode* %23, null
  %25 = ptrtoint %struct.ListNode* %23 to i64
  br i1 %24, label %26, label %29

; <label>:26                                      ; preds = %20
  %27 = bitcast %struct.List* %a to i8**
  store i8* %1, i8** %27, align 8, !tbaa !1
  %28 = ptrtoint i8* %1 to i64
  br label %29

; <label>:29                                      ; preds = %26, %20
  %30 = phi i64 [ %28, %26 ], [ %25, %20 ]
  %31 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %32 = load %struct.ListNode*, %struct.ListNode** %31, align 8, !tbaa !8
  %33 = icmp eq %struct.ListNode* %32, null
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %29
  %35 = bitcast %struct.ListNode** %31 to i64*
  store i64 %30, i64* %35, align 8, !tbaa !8
  %36 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 3
  store i64 0, i64* %36, align 8, !tbaa !9
  br label %37

; <label>:37                                      ; preds = %34, %29
  %38 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %39 = load i64, i64* %38, align 8, !tbaa !10
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8, !tbaa !10
  %41 = load i64*, i64** %4, align 8, !tbaa !11
  %42 = tail call zeroext i8 @UnlockSpinlock(i64* %41) #2
  br label %43

; <label>:43                                      ; preds = %0, %37
  %.0 = phi i32 [ 0, %37 ], [ 1, %0 ]
  ret i32 %.0
}

; Function Attrs: noredzone nounwind uwtable
define i64 @List_Length(%struct.List* nocapture readonly %a) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %5 = load i64, i64* %4, align 8, !tbaa !10
  %6 = load i64*, i64** %1, align 8, !tbaa !11
  %7 = tail call zeroext i8 @UnlockSpinlock(i64* %6) #2
  ret i64 %5
}

; Function Attrs: noredzone nounwind uwtable
define void @List_Remove(%struct.List* nocapture %a, i64 %index) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %5 = load i64, i64* %4, align 8, !tbaa !10
  %6 = icmp eq i64 %5, 0
  %7 = zext i1 %6 to i32
  %8 = icmp ule i64 %5, %index
  %9 = zext i1 %8 to i32
  %10 = or i32 %7, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %0
  %13 = load i64*, i64** %1, align 8, !tbaa !11
  %14 = tail call zeroext i8 @UnlockSpinlock(i64* %13) #2
  br label %152

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 3
  %17 = load i64, i64* %16, align 8, !tbaa !9
  %18 = icmp ult i64 %17, %5
  br i1 %18, label %.preheader1, label %.preheader1.thread

.preheader1.thread:                               ; preds = %15
  store i64 0, i64* %16, align 8, !tbaa !9
  %19 = bitcast %struct.List* %a to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !1
  %21 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %22 = bitcast %struct.ListNode** %21 to i64*
  store i64 %20, i64* %22, align 8, !tbaa !8
  br label %.preheader1..preheader_crit_edge

.preheader1:                                      ; preds = %15
  %23 = icmp ugt i64 %17, %index
  br i1 %23, label %.lr.ph5, label %.preheader1..preheader_crit_edge

.preheader1..preheader_crit_edge:                 ; preds = %.preheader1.thread, %.preheader1
  %.promoted610 = phi i64 [ 0, %.preheader1.thread ], [ %17, %.preheader1 ]
  %.phi.trans.insert = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %.pre9 = load %struct.ListNode*, %struct.ListNode** %.phi.trans.insert, align 8, !tbaa !8
  br label %.preheader

.lr.ph5:                                          ; preds = %.preheader1
  %24 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %25 = bitcast %struct.ListNode** %24 to i64*
  %.pre = load %struct.ListNode*, %struct.ListNode** %24, align 8, !tbaa !8
  %26 = sub i64 %17, %index
  %27 = add i64 %17, -1
  %28 = sub i64 %27, %index
  %xtraiter22 = and i64 %26, 7
  %lcmp.mod23 = icmp eq i64 %xtraiter22, 0
  br i1 %lcmp.mod23, label %.lr.ph5.split, label %.preheader28

.preheader28:                                     ; preds = %.lr.ph5
  br label %29

; <label>:29                                      ; preds = %.preheader28, %29
  %30 = phi %struct.ListNode* [ %36, %29 ], [ %.pre, %.preheader28 ]
  %31 = phi i64 [ %35, %29 ], [ %17, %.preheader28 ]
  %prol.iter24 = phi i64 [ %prol.iter24.sub, %29 ], [ %xtraiter22, %.preheader28 ]
  %32 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %30, i64 0, i32 2
  %33 = bitcast %struct.ListNode** %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !12
  %35 = add i64 %31, -1
  %36 = inttoptr i64 %34 to %struct.ListNode*
  %prol.iter24.sub = add i64 %prol.iter24, -1
  %prol.iter24.cmp = icmp eq i64 %prol.iter24.sub, 0
  br i1 %prol.iter24.cmp, label %.lr.ph5.split.loopexit, label %29, !llvm.loop !16

.lr.ph5.split.loopexit:                           ; preds = %29
  %.lcssa36 = phi %struct.ListNode* [ %36, %29 ]
  %.lcssa35 = phi i64 [ %35, %29 ]
  %.lcssa34 = phi i64 [ %34, %29 ]
  br label %.lr.ph5.split

.lr.ph5.split:                                    ; preds = %.lr.ph5.split.loopexit, %.lr.ph5
  %.unr25 = phi %struct.ListNode* [ %.pre, %.lr.ph5 ], [ %.lcssa36, %.lr.ph5.split.loopexit ]
  %.unr26 = phi i64 [ %17, %.lr.ph5 ], [ %.lcssa35, %.lr.ph5.split.loopexit ]
  %.lcssa20.unr = phi %struct.ListNode* [ undef, %.lr.ph5 ], [ %.lcssa36, %.lr.ph5.split.loopexit ]
  %.lcssa19.unr = phi i64 [ undef, %.lr.ph5 ], [ %.lcssa35, %.lr.ph5.split.loopexit ]
  %.lcssa18.unr = phi i64 [ undef, %.lr.ph5 ], [ %.lcssa34, %.lr.ph5.split.loopexit ]
  %37 = icmp ult i64 %28, 7
  br i1 %37, label %..preheader_crit_edge, label %.lr.ph5.split.split

.lr.ph5.split.split:                              ; preds = %.lr.ph5.split
  br label %52

..preheader_crit_edge.unr-lcssa:                  ; preds = %52
  %.lcssa32 = phi %struct.ListNode* [ %74, %52 ]
  %.lcssa31 = phi i64 [ %72, %52 ]
  %.lcssa30 = phi i64 [ %71, %52 ]
  br label %..preheader_crit_edge

..preheader_crit_edge:                            ; preds = %.lr.ph5.split, %..preheader_crit_edge.unr-lcssa
  %.lcssa20 = phi %struct.ListNode* [ %.lcssa20.unr, %.lr.ph5.split ], [ %.lcssa32, %..preheader_crit_edge.unr-lcssa ]
  %.lcssa19 = phi i64 [ %.lcssa19.unr, %.lr.ph5.split ], [ %.lcssa31, %..preheader_crit_edge.unr-lcssa ]
  %.lcssa18 = phi i64 [ %.lcssa18.unr, %.lr.ph5.split ], [ %.lcssa30, %..preheader_crit_edge.unr-lcssa ]
  store i64 %.lcssa18, i64* %25, align 8, !tbaa !8
  store i64 %.lcssa19, i64* %16, align 8, !tbaa !9
  br label %.preheader

.preheader:                                       ; preds = %.preheader1..preheader_crit_edge, %..preheader_crit_edge
  %.pre-phi = phi %struct.ListNode** [ %.phi.trans.insert, %.preheader1..preheader_crit_edge ], [ %24, %..preheader_crit_edge ]
  %38 = phi %struct.ListNode* [ %.pre9, %.preheader1..preheader_crit_edge ], [ %.lcssa20, %..preheader_crit_edge ]
  %.promoted = phi i64 [ %.promoted610, %.preheader1..preheader_crit_edge ], [ %.lcssa19, %..preheader_crit_edge ]
  %39 = icmp ult i64 %.promoted, %index
  br i1 %39, label %.lr.ph, label %104

.lr.ph:                                           ; preds = %.preheader
  %40 = bitcast %struct.ListNode** %.pre-phi to i64*
  %41 = sub i64 %index, %.promoted
  %42 = add i64 %index, -1
  %43 = sub i64 %42, %.promoted
  %xtraiter = and i64 %41, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %.preheader27

.preheader27:                                     ; preds = %.lr.ph
  br label %44

; <label>:44                                      ; preds = %.preheader27, %44
  %45 = phi i64 [ %50, %44 ], [ %.promoted, %.preheader27 ]
  %46 = phi %struct.ListNode* [ %.cast.prol, %44 ], [ %38, %.preheader27 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %44 ], [ %xtraiter, %.preheader27 ]
  %47 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %46, i64 0, i32 1
  %48 = bitcast %struct.ListNode** %47 to i64*
  %49 = load i64, i64* %48, align 8, !tbaa !18
  store i64 %49, i64* %40, align 8, !tbaa !8
  %50 = add i64 %45, 1
  %.cast.prol = inttoptr i64 %49 to %struct.ListNode*
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.split.loopexit, label %44, !llvm.loop !19

.lr.ph.split.loopexit:                            ; preds = %44
  %.cast.prol.lcssa = phi %struct.ListNode* [ %.cast.prol, %44 ]
  %.lcssa33 = phi i64 [ %50, %44 ]
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %.lr.ph.split.loopexit, %.lr.ph
  %.unr = phi i64 [ %.promoted, %.lr.ph ], [ %.lcssa33, %.lr.ph.split.loopexit ]
  %.unr21 = phi %struct.ListNode* [ %38, %.lr.ph ], [ %.cast.prol.lcssa, %.lr.ph.split.loopexit ]
  %.cast.lcssa.unr = phi %struct.ListNode* [ undef, %.lr.ph ], [ %.cast.prol.lcssa, %.lr.ph.split.loopexit ]
  %.lcssa.unr = phi i64 [ undef, %.lr.ph ], [ %.lcssa33, %.lr.ph.split.loopexit ]
  %51 = icmp ult i64 %43, 7
  br i1 %51, label %._crit_edge, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %75

; <label>:52                                      ; preds = %52, %.lr.ph5.split.split
  %53 = phi %struct.ListNode* [ %.unr25, %.lr.ph5.split.split ], [ %74, %52 ]
  %54 = phi i64 [ %.unr26, %.lr.ph5.split.split ], [ %72, %52 ]
  %55 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %53, i64 0, i32 2
  %56 = load %struct.ListNode*, %struct.ListNode** %55, align 8, !tbaa !12
  %57 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %56, i64 0, i32 2
  %58 = load %struct.ListNode*, %struct.ListNode** %57, align 8, !tbaa !12
  %59 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %58, i64 0, i32 2
  %60 = load %struct.ListNode*, %struct.ListNode** %59, align 8, !tbaa !12
  %61 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %60, i64 0, i32 2
  %62 = load %struct.ListNode*, %struct.ListNode** %61, align 8, !tbaa !12
  %63 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %62, i64 0, i32 2
  %64 = load %struct.ListNode*, %struct.ListNode** %63, align 8, !tbaa !12
  %65 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %64, i64 0, i32 2
  %66 = load %struct.ListNode*, %struct.ListNode** %65, align 8, !tbaa !12
  %67 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %66, i64 0, i32 2
  %68 = load %struct.ListNode*, %struct.ListNode** %67, align 8, !tbaa !12
  %69 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %68, i64 0, i32 2
  %70 = bitcast %struct.ListNode** %69 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !12
  %72 = add i64 %54, -8
  %73 = icmp ugt i64 %72, %index
  %74 = inttoptr i64 %71 to %struct.ListNode*
  br i1 %73, label %52, label %..preheader_crit_edge.unr-lcssa

; <label>:75                                      ; preds = %75, %.lr.ph.split.split
  %76 = phi i64 [ %.unr, %.lr.ph.split.split ], [ %102, %75 ]
  %77 = phi %struct.ListNode* [ %.unr21, %.lr.ph.split.split ], [ %.cast.7, %75 ]
  %78 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %77, i64 0, i32 1
  %79 = bitcast %struct.ListNode** %78 to i64*
  %80 = load i64, i64* %79, align 8, !tbaa !18
  store i64 %80, i64* %40, align 8, !tbaa !8
  %.cast = inttoptr i64 %80 to %struct.ListNode*
  %81 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast, i64 0, i32 1
  %82 = bitcast %struct.ListNode** %81 to i64*
  %83 = load i64, i64* %82, align 8, !tbaa !18
  store i64 %83, i64* %40, align 8, !tbaa !8
  %.cast.1 = inttoptr i64 %83 to %struct.ListNode*
  %84 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.1, i64 0, i32 1
  %85 = bitcast %struct.ListNode** %84 to i64*
  %86 = load i64, i64* %85, align 8, !tbaa !18
  store i64 %86, i64* %40, align 8, !tbaa !8
  %.cast.2 = inttoptr i64 %86 to %struct.ListNode*
  %87 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.2, i64 0, i32 1
  %88 = bitcast %struct.ListNode** %87 to i64*
  %89 = load i64, i64* %88, align 8, !tbaa !18
  store i64 %89, i64* %40, align 8, !tbaa !8
  %.cast.3 = inttoptr i64 %89 to %struct.ListNode*
  %90 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.3, i64 0, i32 1
  %91 = bitcast %struct.ListNode** %90 to i64*
  %92 = load i64, i64* %91, align 8, !tbaa !18
  store i64 %92, i64* %40, align 8, !tbaa !8
  %.cast.4 = inttoptr i64 %92 to %struct.ListNode*
  %93 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.4, i64 0, i32 1
  %94 = bitcast %struct.ListNode** %93 to i64*
  %95 = load i64, i64* %94, align 8, !tbaa !18
  store i64 %95, i64* %40, align 8, !tbaa !8
  %.cast.5 = inttoptr i64 %95 to %struct.ListNode*
  %96 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.5, i64 0, i32 1
  %97 = bitcast %struct.ListNode** %96 to i64*
  %98 = load i64, i64* %97, align 8, !tbaa !18
  store i64 %98, i64* %40, align 8, !tbaa !8
  %.cast.6 = inttoptr i64 %98 to %struct.ListNode*
  %99 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.6, i64 0, i32 1
  %100 = bitcast %struct.ListNode** %99 to i64*
  %101 = load i64, i64* %100, align 8, !tbaa !18
  store i64 %101, i64* %40, align 8, !tbaa !8
  %102 = add i64 %76, 8
  %103 = icmp ult i64 %102, %index
  %.cast.7 = inttoptr i64 %101 to %struct.ListNode*
  br i1 %103, label %75, label %._crit_edge.unr-lcssa

._crit_edge.unr-lcssa:                            ; preds = %75
  %.cast.7.lcssa = phi %struct.ListNode* [ %.cast.7, %75 ]
  %.lcssa29 = phi i64 [ %102, %75 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.split, %._crit_edge.unr-lcssa
  %.cast.lcssa = phi %struct.ListNode* [ %.cast.lcssa.unr, %.lr.ph.split ], [ %.cast.7.lcssa, %._crit_edge.unr-lcssa ]
  %.lcssa = phi i64 [ %.lcssa.unr, %.lr.ph.split ], [ %.lcssa29, %._crit_edge.unr-lcssa ]
  store i64 %.lcssa, i64* %16, align 8, !tbaa !9
  br label %104

; <label>:104                                     ; preds = %._crit_edge, %.preheader
  %105 = phi %struct.ListNode* [ %.cast.lcssa, %._crit_edge ], [ %38, %.preheader ]
  %106 = bitcast %struct.ListNode* %105 to i8*
  %107 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 2
  %108 = load %struct.ListNode*, %struct.ListNode** %107, align 8, !tbaa !12
  %109 = icmp eq %struct.ListNode* %108, null
  br i1 %109, label %116, label %110

; <label>:110                                     ; preds = %104
  %111 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 1
  %112 = bitcast %struct.ListNode** %111 to i64*
  %113 = load i64, i64* %112, align 8, !tbaa !15
  %114 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %108, i64 0, i32 1
  %115 = bitcast %struct.ListNode** %114 to i64*
  store i64 %113, i64* %115, align 8, !tbaa !15
  br label %116

; <label>:116                                     ; preds = %104, %110
  %117 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 1
  %118 = load %struct.ListNode*, %struct.ListNode** %117, align 8, !tbaa !15
  %119 = icmp eq %struct.ListNode* %118, null
  br i1 %119, label %126, label %120

; <label>:120                                     ; preds = %116
  %121 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 2
  %122 = bitcast %struct.ListNode** %121 to i64*
  %123 = load i64, i64* %122, align 8, !tbaa !12
  %124 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %118, i64 0, i32 2
  %125 = bitcast %struct.ListNode** %124 to i64*
  store i64 %123, i64* %125, align 8, !tbaa !12
  br label %126

; <label>:126                                     ; preds = %116, %120
  %127 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 0
  %128 = load %struct.ListNode*, %struct.ListNode** %127, align 8, !tbaa !1
  %129 = icmp eq %struct.ListNode* %128, %105
  %130 = ptrtoint %struct.ListNode* %128 to i64
  br i1 %129, label %131, label %136

; <label>:131                                     ; preds = %126
  %132 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 1
  %133 = bitcast %struct.ListNode** %132 to i64*
  %134 = load i64, i64* %133, align 8, !tbaa !15
  %135 = bitcast %struct.List* %a to i64*
  store i64 %134, i64* %135, align 8, !tbaa !1
  br label %136

; <label>:136                                     ; preds = %131, %126
  %137 = phi i64 [ %134, %131 ], [ %130, %126 ]
  %138 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 1
  %139 = load %struct.ListNode*, %struct.ListNode** %138, align 8, !tbaa !7
  %140 = icmp eq %struct.ListNode* %139, %105
  br i1 %140, label %141, label %146

; <label>:141                                     ; preds = %136
  %142 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %105, i64 0, i32 2
  %143 = bitcast %struct.ListNode** %142 to i64*
  %144 = load i64, i64* %143, align 8, !tbaa !12
  %145 = bitcast %struct.ListNode** %138 to i64*
  store i64 %144, i64* %145, align 8, !tbaa !7
  br label %146

; <label>:146                                     ; preds = %141, %136
  %147 = bitcast %struct.ListNode** %.pre-phi to i64*
  store i64 %137, i64* %147, align 8, !tbaa !8
  store i64 0, i64* %16, align 8, !tbaa !9
  tail call void @kfree(i8* %106) #2
  %148 = load i64, i64* %4, align 8, !tbaa !10
  %149 = add i64 %148, -1
  store i64 %149, i64* %4, align 8, !tbaa !10
  %150 = load i64*, i64** %1, align 8, !tbaa !11
  %151 = tail call zeroext i8 @UnlockSpinlock(i64* %150) #2
  br label %152

; <label>:152                                     ; preds = %146, %12
  ret void
}

; Function Attrs: noredzone
declare void @kfree(i8*) #1

; Function Attrs: noredzone nounwind uwtable
define void @List_Free(%struct.List* %a) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %5 = load i64, i64* %4, align 8, !tbaa !10
  %6 = load i64*, i64** %1, align 8, !tbaa !11
  %7 = tail call zeroext i8 @UnlockSpinlock(i64* %6) #2
  %8 = icmp eq i64 %5, 0
  br i1 %8, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  tail call void @List_Remove(%struct.List* %a, i64 0) #3
  %9 = load i64*, i64** %1, align 8, !tbaa !11
  %10 = tail call zeroext i8 @LockSpinlock(i64* %9) #2
  %11 = load i64, i64* %4, align 8, !tbaa !10
  %12 = load i64*, i64** %1, align 8, !tbaa !11
  %13 = tail call zeroext i8 @UnlockSpinlock(i64* %12) #2
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %15 = load i64*, i64** %1, align 8, !tbaa !11
  %16 = bitcast %struct.List* %a to i8*
  tail call void @kfree(i8* %16) #2
  tail call void @FreeSpinlock(i64* %15) #2
  ret void
}

; Function Attrs: noredzone
declare void @FreeSpinlock(i64*) #1

; Function Attrs: noredzone nounwind uwtable
define i8* @List_EntryAt(%struct.List* nocapture %a, i64 %index) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 3
  %5 = load i64, i64* %4, align 8, !tbaa !9
  %6 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %7 = load i64, i64* %6, align 8, !tbaa !10
  %8 = icmp ult i64 %5, %7
  br i1 %8, label %14, label %9

; <label>:9                                       ; preds = %0
  store i64 0, i64* %4, align 8, !tbaa !9
  %10 = bitcast %struct.List* %a to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %13 = bitcast %struct.ListNode** %12 to i64*
  store i64 %11, i64* %13, align 8, !tbaa !8
  br label %14

; <label>:14                                      ; preds = %0, %9
  %.promoted4 = phi i64 [ %5, %0 ], [ 0, %9 ]
  %15 = icmp ugt i64 %7, %index
  br i1 %15, label %.preheader1, label %31

.preheader1:                                      ; preds = %14
  %16 = icmp ugt i64 %.promoted4, %index
  %17 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  br i1 %16, label %.lr.ph3, label %.preheader1..preheader_crit_edge

.preheader1..preheader_crit_edge:                 ; preds = %.preheader1
  %.pre8 = load %struct.ListNode*, %struct.ListNode** %17, align 8, !tbaa !8
  br label %.preheader

.lr.ph3:                                          ; preds = %.preheader1
  %18 = bitcast %struct.ListNode** %17 to i64*
  %.pre = load %struct.ListNode*, %struct.ListNode** %17, align 8, !tbaa !8
  %19 = sub i64 %.promoted4, %index
  %20 = add i64 %.promoted4, -1
  %21 = sub i64 %20, %index
  %xtraiter23 = and i64 %19, 7
  %lcmp.mod24 = icmp eq i64 %xtraiter23, 0
  br i1 %lcmp.mod24, label %.lr.ph3.split, label %.preheader29

.preheader29:                                     ; preds = %.lr.ph3
  br label %22

; <label>:22                                      ; preds = %.preheader29, %22
  %23 = phi %struct.ListNode* [ %29, %22 ], [ %.pre, %.preheader29 ]
  %24 = phi i64 [ %28, %22 ], [ %.promoted4, %.preheader29 ]
  %prol.iter25 = phi i64 [ %prol.iter25.sub, %22 ], [ %xtraiter23, %.preheader29 ]
  %25 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %23, i64 0, i32 2
  %26 = bitcast %struct.ListNode** %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !12
  %28 = add i64 %24, -1
  %29 = inttoptr i64 %27 to %struct.ListNode*
  %prol.iter25.sub = add i64 %prol.iter25, -1
  %prol.iter25.cmp = icmp eq i64 %prol.iter25.sub, 0
  br i1 %prol.iter25.cmp, label %.lr.ph3.split.loopexit, label %22, !llvm.loop !20

.lr.ph3.split.loopexit:                           ; preds = %22
  %.lcssa37 = phi %struct.ListNode* [ %29, %22 ]
  %.lcssa36 = phi i64 [ %28, %22 ]
  %.lcssa35 = phi i64 [ %27, %22 ]
  br label %.lr.ph3.split

.lr.ph3.split:                                    ; preds = %.lr.ph3.split.loopexit, %.lr.ph3
  %.unr26 = phi %struct.ListNode* [ %.pre, %.lr.ph3 ], [ %.lcssa37, %.lr.ph3.split.loopexit ]
  %.unr27 = phi i64 [ %.promoted4, %.lr.ph3 ], [ %.lcssa36, %.lr.ph3.split.loopexit ]
  %.lcssa21.unr = phi %struct.ListNode* [ undef, %.lr.ph3 ], [ %.lcssa37, %.lr.ph3.split.loopexit ]
  %.lcssa20.unr = phi i64 [ undef, %.lr.ph3 ], [ %.lcssa36, %.lr.ph3.split.loopexit ]
  %.lcssa19.unr = phi i64 [ undef, %.lr.ph3 ], [ %.lcssa35, %.lr.ph3.split.loopexit ]
  %30 = icmp ult i64 %21, 7
  br i1 %30, label %..preheader_crit_edge, label %.lr.ph3.split.split

.lr.ph3.split.split:                              ; preds = %.lr.ph3.split
  br label %48

; <label>:31                                      ; preds = %14
  %32 = load i64*, i64** %1, align 8, !tbaa !11
  %33 = tail call zeroext i8 @UnlockSpinlock(i64* %32) #2
  br label %105

..preheader_crit_edge.unr-lcssa:                  ; preds = %48
  %.lcssa33 = phi %struct.ListNode* [ %70, %48 ]
  %.lcssa32 = phi i64 [ %68, %48 ]
  %.lcssa31 = phi i64 [ %67, %48 ]
  br label %..preheader_crit_edge

..preheader_crit_edge:                            ; preds = %.lr.ph3.split, %..preheader_crit_edge.unr-lcssa
  %.lcssa21 = phi %struct.ListNode* [ %.lcssa21.unr, %.lr.ph3.split ], [ %.lcssa33, %..preheader_crit_edge.unr-lcssa ]
  %.lcssa20 = phi i64 [ %.lcssa20.unr, %.lr.ph3.split ], [ %.lcssa32, %..preheader_crit_edge.unr-lcssa ]
  %.lcssa19 = phi i64 [ %.lcssa19.unr, %.lr.ph3.split ], [ %.lcssa31, %..preheader_crit_edge.unr-lcssa ]
  store i64 %.lcssa19, i64* %18, align 8, !tbaa !8
  store i64 %.lcssa20, i64* %4, align 8, !tbaa !9
  br label %.preheader

.preheader:                                       ; preds = %.preheader1..preheader_crit_edge, %..preheader_crit_edge
  %34 = phi %struct.ListNode* [ %.pre8, %.preheader1..preheader_crit_edge ], [ %.lcssa21, %..preheader_crit_edge ]
  %.promoted = phi i64 [ %.promoted4, %.preheader1..preheader_crit_edge ], [ %.lcssa20, %..preheader_crit_edge ]
  %35 = icmp ult i64 %.promoted, %index
  br i1 %35, label %.lr.ph, label %100

.lr.ph:                                           ; preds = %.preheader
  %36 = bitcast %struct.ListNode** %17 to i64*
  %37 = sub i64 %index, %.promoted
  %38 = add i64 %index, -1
  %39 = sub i64 %38, %.promoted
  %xtraiter = and i64 %37, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %.preheader28

.preheader28:                                     ; preds = %.lr.ph
  br label %40

; <label>:40                                      ; preds = %.preheader28, %40
  %41 = phi i64 [ %46, %40 ], [ %.promoted, %.preheader28 ]
  %42 = phi %struct.ListNode* [ %.cast.prol, %40 ], [ %34, %.preheader28 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %40 ], [ %xtraiter, %.preheader28 ]
  %43 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %42, i64 0, i32 1
  %44 = bitcast %struct.ListNode** %43 to i64*
  %45 = load i64, i64* %44, align 8, !tbaa !18
  store i64 %45, i64* %36, align 8, !tbaa !8
  %46 = add i64 %41, 1
  %.cast.prol = inttoptr i64 %45 to %struct.ListNode*
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.split.loopexit, label %40, !llvm.loop !21

.lr.ph.split.loopexit:                            ; preds = %40
  %.cast.prol.lcssa = phi %struct.ListNode* [ %.cast.prol, %40 ]
  %.lcssa34 = phi i64 [ %46, %40 ]
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %.lr.ph.split.loopexit, %.lr.ph
  %.unr = phi i64 [ %.promoted, %.lr.ph ], [ %.lcssa34, %.lr.ph.split.loopexit ]
  %.unr22 = phi %struct.ListNode* [ %34, %.lr.ph ], [ %.cast.prol.lcssa, %.lr.ph.split.loopexit ]
  %.cast.lcssa.unr = phi %struct.ListNode* [ undef, %.lr.ph ], [ %.cast.prol.lcssa, %.lr.ph.split.loopexit ]
  %.lcssa18.unr = phi i64 [ undef, %.lr.ph ], [ %.lcssa34, %.lr.ph.split.loopexit ]
  %47 = icmp ult i64 %39, 7
  br i1 %47, label %._crit_edge, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %71

; <label>:48                                      ; preds = %48, %.lr.ph3.split.split
  %49 = phi %struct.ListNode* [ %.unr26, %.lr.ph3.split.split ], [ %70, %48 ]
  %50 = phi i64 [ %.unr27, %.lr.ph3.split.split ], [ %68, %48 ]
  %51 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %49, i64 0, i32 2
  %52 = load %struct.ListNode*, %struct.ListNode** %51, align 8, !tbaa !12
  %53 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %52, i64 0, i32 2
  %54 = load %struct.ListNode*, %struct.ListNode** %53, align 8, !tbaa !12
  %55 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %54, i64 0, i32 2
  %56 = load %struct.ListNode*, %struct.ListNode** %55, align 8, !tbaa !12
  %57 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %56, i64 0, i32 2
  %58 = load %struct.ListNode*, %struct.ListNode** %57, align 8, !tbaa !12
  %59 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %58, i64 0, i32 2
  %60 = load %struct.ListNode*, %struct.ListNode** %59, align 8, !tbaa !12
  %61 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %60, i64 0, i32 2
  %62 = load %struct.ListNode*, %struct.ListNode** %61, align 8, !tbaa !12
  %63 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %62, i64 0, i32 2
  %64 = load %struct.ListNode*, %struct.ListNode** %63, align 8, !tbaa !12
  %65 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %64, i64 0, i32 2
  %66 = bitcast %struct.ListNode** %65 to i64*
  %67 = load i64, i64* %66, align 8, !tbaa !12
  %68 = add i64 %50, -8
  %69 = icmp ugt i64 %68, %index
  %70 = inttoptr i64 %67 to %struct.ListNode*
  br i1 %69, label %48, label %..preheader_crit_edge.unr-lcssa

; <label>:71                                      ; preds = %71, %.lr.ph.split.split
  %72 = phi i64 [ %.unr, %.lr.ph.split.split ], [ %98, %71 ]
  %73 = phi %struct.ListNode* [ %.unr22, %.lr.ph.split.split ], [ %.cast.7, %71 ]
  %74 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %73, i64 0, i32 1
  %75 = bitcast %struct.ListNode** %74 to i64*
  %76 = load i64, i64* %75, align 8, !tbaa !18
  store i64 %76, i64* %36, align 8, !tbaa !8
  %.cast = inttoptr i64 %76 to %struct.ListNode*
  %77 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast, i64 0, i32 1
  %78 = bitcast %struct.ListNode** %77 to i64*
  %79 = load i64, i64* %78, align 8, !tbaa !18
  store i64 %79, i64* %36, align 8, !tbaa !8
  %.cast.1 = inttoptr i64 %79 to %struct.ListNode*
  %80 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.1, i64 0, i32 1
  %81 = bitcast %struct.ListNode** %80 to i64*
  %82 = load i64, i64* %81, align 8, !tbaa !18
  store i64 %82, i64* %36, align 8, !tbaa !8
  %.cast.2 = inttoptr i64 %82 to %struct.ListNode*
  %83 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.2, i64 0, i32 1
  %84 = bitcast %struct.ListNode** %83 to i64*
  %85 = load i64, i64* %84, align 8, !tbaa !18
  store i64 %85, i64* %36, align 8, !tbaa !8
  %.cast.3 = inttoptr i64 %85 to %struct.ListNode*
  %86 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.3, i64 0, i32 1
  %87 = bitcast %struct.ListNode** %86 to i64*
  %88 = load i64, i64* %87, align 8, !tbaa !18
  store i64 %88, i64* %36, align 8, !tbaa !8
  %.cast.4 = inttoptr i64 %88 to %struct.ListNode*
  %89 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.4, i64 0, i32 1
  %90 = bitcast %struct.ListNode** %89 to i64*
  %91 = load i64, i64* %90, align 8, !tbaa !18
  store i64 %91, i64* %36, align 8, !tbaa !8
  %.cast.5 = inttoptr i64 %91 to %struct.ListNode*
  %92 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.5, i64 0, i32 1
  %93 = bitcast %struct.ListNode** %92 to i64*
  %94 = load i64, i64* %93, align 8, !tbaa !18
  store i64 %94, i64* %36, align 8, !tbaa !8
  %.cast.6 = inttoptr i64 %94 to %struct.ListNode*
  %95 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.cast.6, i64 0, i32 1
  %96 = bitcast %struct.ListNode** %95 to i64*
  %97 = load i64, i64* %96, align 8, !tbaa !18
  store i64 %97, i64* %36, align 8, !tbaa !8
  %98 = add i64 %72, 8
  %99 = icmp ult i64 %98, %index
  %.cast.7 = inttoptr i64 %97 to %struct.ListNode*
  br i1 %99, label %71, label %._crit_edge.unr-lcssa

._crit_edge.unr-lcssa:                            ; preds = %71
  %.cast.7.lcssa = phi %struct.ListNode* [ %.cast.7, %71 ]
  %.lcssa30 = phi i64 [ %98, %71 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.split, %._crit_edge.unr-lcssa
  %.cast.lcssa = phi %struct.ListNode* [ %.cast.lcssa.unr, %.lr.ph.split ], [ %.cast.7.lcssa, %._crit_edge.unr-lcssa ]
  %.lcssa18 = phi i64 [ %.lcssa18.unr, %.lr.ph.split ], [ %.lcssa30, %._crit_edge.unr-lcssa ]
  store i64 %.lcssa18, i64* %4, align 8, !tbaa !9
  br label %100

; <label>:100                                     ; preds = %._crit_edge, %.preheader
  %.lcssa = phi %struct.ListNode* [ %.cast.lcssa, %._crit_edge ], [ %34, %.preheader ]
  %101 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %.lcssa, i64 0, i32 0
  %102 = load i8*, i8** %101, align 8, !tbaa !14
  %103 = load i64*, i64** %1, align 8, !tbaa !11
  %104 = tail call zeroext i8 @UnlockSpinlock(i64* %103) #2
  br label %105

; <label>:105                                     ; preds = %100, %31
  %.0 = phi i8* [ null, %31 ], [ %102, %100 ]
  ret i8* %.0
}

; Function Attrs: noredzone nounwind uwtable
define i8* @List_Next(%struct.List* nocapture %a) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 3
  %5 = load i64, i64* %4, align 8, !tbaa !9
  %6 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 4
  %7 = load i64, i64* %6, align 8, !tbaa !10
  %8 = add i64 %7, -1
  %9 = icmp ult i64 %5, %8
  br i1 %9, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %0
  %.phi.trans.insert = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %.pre = load %struct.ListNode*, %struct.ListNode** %.phi.trans.insert, align 8, !tbaa !8
  br label %19

; <label>:10                                      ; preds = %0
  %11 = add i64 %5, 1
  store i64 %11, i64* %4, align 8, !tbaa !9
  %12 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %13 = load %struct.ListNode*, %struct.ListNode** %12, align 8, !tbaa !8
  %14 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %13, i64 0, i32 1
  %15 = bitcast %struct.ListNode** %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !15
  %17 = bitcast %struct.ListNode** %12 to i64*
  store i64 %16, i64* %17, align 8, !tbaa !8
  %18 = inttoptr i64 %16 to %struct.ListNode*
  br label %19

; <label>:19                                      ; preds = %._crit_edge, %10
  %20 = phi %struct.ListNode* [ %.pre, %._crit_edge ], [ %18, %10 ]
  %21 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %20, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8, !tbaa !14
  %23 = load i64*, i64** %1, align 8, !tbaa !11
  %24 = tail call zeroext i8 @UnlockSpinlock(i64* %23) #2
  ret i8* %22
}

; Function Attrs: noredzone nounwind uwtable
define i8* @List_Prev(%struct.List* nocapture %a) #0 {
  %1 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 5
  %2 = load i64*, i64** %1, align 8, !tbaa !11
  %3 = tail call zeroext i8 @LockSpinlock(i64* %2) #2
  %4 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 3
  %5 = load i64, i64* %4, align 8, !tbaa !9
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %._crit_edge, label %7

._crit_edge:                                      ; preds = %0
  %.phi.trans.insert = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %.pre = load %struct.ListNode*, %struct.ListNode** %.phi.trans.insert, align 8, !tbaa !8
  br label %16

; <label>:7                                       ; preds = %0
  %8 = add i64 %5, -1
  store i64 %8, i64* %4, align 8, !tbaa !9
  %9 = getelementptr inbounds %struct.List, %struct.List* %a, i64 0, i32 2
  %10 = load %struct.ListNode*, %struct.ListNode** %9, align 8, !tbaa !8
  %11 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %10, i64 0, i32 2
  %12 = bitcast %struct.ListNode** %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !12
  %14 = bitcast %struct.ListNode** %9 to i64*
  store i64 %13, i64* %14, align 8, !tbaa !8
  %15 = inttoptr i64 %13 to %struct.ListNode*
  br label %16

; <label>:16                                      ; preds = %._crit_edge, %7
  %17 = phi %struct.ListNode* [ %.pre, %._crit_edge ], [ %15, %7 ]
  %18 = getelementptr inbounds %struct.ListNode, %struct.ListNode* %17, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !14
  %20 = load i64*, i64** %1, align 8, !tbaa !11
  %21 = tail call zeroext i8 @UnlockSpinlock(i64* %20) #2
  ret i8* %19
}

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin noredzone nounwind }
attributes #3 = { nobuiltin noredzone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !3, i64 0}
!2 = !{!"List", !3, i64 0, !3, i64 8, !3, i64 16, !6, i64 24, !6, i64 32, !3, i64 40}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!"long", !4, i64 0}
!7 = !{!2, !3, i64 8}
!8 = !{!2, !3, i64 16}
!9 = !{!2, !6, i64 24}
!10 = !{!2, !6, i64 32}
!11 = !{!2, !3, i64 40}
!12 = !{!13, !3, i64 16}
!13 = !{!"ListNode", !3, i64 0, !3, i64 8, !3, i64 16}
!14 = !{!13, !3, i64 0}
!15 = !{!13, !3, i64 8}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = !{!3, !3, i64 0}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
