; ModuleID = 'common/sprintf.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1

; Function Attrs: noredzone nounwind uwtable
define i8* @itoa(i64 %val, i8* %ostr, i32 %base) #0 {
  %str = alloca [256 x i8], align 16
  %1 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %1) #1
  switch i32 %base, label %34 [
    i32 16, label %.preheader.preheader
    i32 2, label %.preheader2.preheader
  ]

.preheader2.preheader:                            ; preds = %0
  br label %.preheader2

.preheader.preheader:                             ; preds = %0
  br label %.preheader

; <label>:2                                       ; preds = %.preheader
  %3 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 16
  store i8 0, i8* %3, align 16, !tbaa !1
  br label %57

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %indvars.iv5 = phi i64 [ 0, %.preheader.preheader ], [ %indvars.iv.next6.1, %.preheader ]
  %4 = shl nsw i64 %indvars.iv5, 2
  %5 = ashr i64 %val, %4
  %6 = and i64 %5, 15
  %7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1, !tbaa !1
  %9 = sub nuw nsw i64 15, %indvars.iv5
  %sext = shl i64 %9, 32
  %10 = ashr exact i64 %sext, 32
  %11 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %10
  store i8 %8, i8* %11, align 1, !tbaa !1
  %indvars.iv.next6 = shl i64 %indvars.iv5, 2
  %12 = or i64 %indvars.iv.next6, 4
  %13 = ashr i64 %val, %12
  %14 = and i64 %13, 15
  %15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1, !tbaa !1
  %17 = sub i64 14, %indvars.iv5
  %sext.1 = shl i64 %17, 32
  %18 = ashr exact i64 %sext.1, 32
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %18
  store i8 %16, i8* %19, align 2, !tbaa !1
  %indvars.iv.next6.1 = add nsw i64 %indvars.iv5, 2
  %exitcond.1 = icmp eq i64 %indvars.iv.next6.1, 16
  br i1 %exitcond.1, label %2, label %.preheader

; <label>:20                                      ; preds = %.preheader2
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 64
  store i8 0, i8* %21, align 16, !tbaa !1
  br label %57

.preheader2:                                      ; preds = %.preheader2, %.preheader2.preheader
  %indvars.iv7 = phi i64 [ 0, %.preheader2.preheader ], [ %indvars.iv.next8.1, %.preheader2 ]
  %22 = lshr i64 %val, %indvars.iv7
  %23 = and i64 %22, 1
  %24 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1, !tbaa !1
  %26 = sub nuw nsw i64 63, %indvars.iv7
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %26
  store i8 %25, i8* %27, align 1, !tbaa !1
  %indvars.iv.next8 = or i64 %indvars.iv7, 1
  %28 = lshr i64 %val, %indvars.iv.next8
  %29 = and i64 %28, 1
  %30 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1, !tbaa !1
  %32 = sub i64 62, %indvars.iv7
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %32
  store i8 %31, i8* %33, align 2, !tbaa !1
  %indvars.iv.next8.1 = add nsw i64 %indvars.iv7, 2
  %exitcond9.1 = icmp eq i64 %indvars.iv.next8.1, 64
  br i1 %exitcond9.1, label %20, label %.preheader2

; <label>:34                                      ; preds = %0
  %35 = icmp slt i32 %base, 16
  br i1 %35, label %36, label %56

; <label>:36                                      ; preds = %34
  %37 = icmp slt i64 %val, 0
  %38 = sub nsw i64 0, %val
  %.val = select i1 %37, i64 %38, i64 %val
  %39 = sext i32 %base to i64
  br label %40

; <label>:40                                      ; preds = %36, %40
  %indvars.iv = phi i64 [ 0, %36 ], [ %indvars.iv.next, %40 ]
  %.0 = phi i64 [ %.val, %36 ], [ %45, %40 ]
  %41 = srem i64 %.0, %39
  %42 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %indvars.iv
  store i8 %43, i8* %44, align 1, !tbaa !1
  %45 = sdiv i64 %.0, %39
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %40

; <label>:47                                      ; preds = %40
  %indvars.iv.next.lcssa = phi i64 [ %indvars.iv.next, %40 ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %40 ]
  %48 = icmp sgt i64 %val, -1
  br i1 %48, label %53, label %49

; <label>:49                                      ; preds = %47
  %50 = add i64 %indvars.iv.lcssa, 2
  %sext10 = shl i64 %indvars.iv.next.lcssa, 32
  %51 = ashr exact i64 %sext10, 32
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %51
  store i8 45, i8* %52, align 1, !tbaa !1
  br label %53

; <label>:53                                      ; preds = %47, %49
  %pos.1 = phi i64 [ %50, %49 ], [ %indvars.iv.next.lcssa, %47 ]
  %sext11 = shl i64 %pos.1, 32
  %54 = ashr exact i64 %sext11, 32
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %54
  store i8 0, i8* %55, align 1, !tbaa !1
  call void @strrev(i8* %1) #3
  br label %57

; <label>:56                                      ; preds = %34
  store i8 0, i8* %1, align 16, !tbaa !1
  br label %57

; <label>:57                                      ; preds = %20, %56, %53, %2
  %58 = call i64 @strlen(i8* %1) #3
  %59 = call i8* @memcpy(i8* %ostr, i8* %1, i64 %58) #3
  %60 = call i64 @strlen(i8* %1) #3
  %61 = getelementptr inbounds i8, i8* %ostr, i64 %60
  call void @llvm.lifetime.end(i64 256, i8* %1) #1
  ret i8* %61
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noredzone
declare void @strrev(i8*) #2

; Function Attrs: noredzone
declare i8* @memcpy(i8*, i8*, i64) #2

; Function Attrs: noredzone
declare i64 @strlen(i8*) #2

; Function Attrs: noredzone nounwind uwtable
define i8* @utoa(i64 %val, i8* %ostr, i32 %base) #0 {
  %str = alloca [256 x i8], align 16
  %1 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %1) #1
  %2 = icmp eq i32 %base, 0
  %.base = select i1 %2, i32 16, i32 %base
  switch i32 %.base, label %56 [
    i32 16, label %.preheader3
    i32 2, label %.preheader4.preheader
  ]

.preheader4.preheader:                            ; preds = %0
  br label %.preheader4

.preheader3:                                      ; preds = %0
  %3 = and i64 %val, 15
  %4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1, !tbaa !1
  %6 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 7
  store i8 %5, i8* %6, align 1, !tbaa !1
  %7 = lshr i64 %val, 4
  %8 = and i64 %7, 15
  %9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1, !tbaa !1
  %11 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 6
  store i8 %10, i8* %11, align 2, !tbaa !1
  %12 = lshr i64 %val, 8
  %13 = and i64 %12, 15
  %14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1, !tbaa !1
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 5
  store i8 %15, i8* %16, align 1, !tbaa !1
  %17 = lshr i64 %val, 12
  %18 = and i64 %17, 15
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1, !tbaa !1
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 4
  store i8 %20, i8* %21, align 4, !tbaa !1
  %22 = lshr i64 %val, 16
  %23 = and i64 %22, 15
  %24 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1, !tbaa !1
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 3
  store i8 %25, i8* %26, align 1, !tbaa !1
  %27 = lshr i64 %val, 20
  %28 = and i64 %27, 15
  %29 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1, !tbaa !1
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 2
  store i8 %30, i8* %31, align 2, !tbaa !1
  %32 = lshr i64 %val, 24
  %33 = and i64 %32, 15
  %34 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %33
  %35 = load i8, i8* %34, align 1, !tbaa !1
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 1
  store i8 %35, i8* %36, align 1, !tbaa !1
  %37 = lshr i64 %val, 28
  %38 = and i64 %37, 15
  %39 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1, !tbaa !1
  store i8 %40, i8* %1, align 16, !tbaa !1
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 8
  store i8 0, i8* %41, align 8, !tbaa !1
  br label %72

; <label>:42                                      ; preds = %.preheader4
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 32
  store i8 0, i8* %43, align 16, !tbaa !1
  br label %72

.preheader4:                                      ; preds = %.preheader4, %.preheader4.preheader
  %indvars.iv9 = phi i64 [ 0, %.preheader4.preheader ], [ %indvars.iv.next10.1, %.preheader4 ]
  %44 = lshr i64 %val, %indvars.iv9
  %45 = and i64 %44, 1
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1, !tbaa !1
  %48 = sub nuw nsw i64 31, %indvars.iv9
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %48
  store i8 %47, i8* %49, align 1, !tbaa !1
  %indvars.iv.next10 = or i64 %indvars.iv9, 1
  %50 = lshr i64 %val, %indvars.iv.next10
  %51 = and i64 %50, 1
  %52 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1, !tbaa !1
  %54 = sub i64 30, %indvars.iv9
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %54
  store i8 %53, i8* %55, align 2, !tbaa !1
  %indvars.iv.next10.1 = add nsw i64 %indvars.iv9, 2
  %exitcond.1 = icmp eq i64 %indvars.iv.next10.1, 32
  br i1 %exitcond.1, label %42, label %.preheader4

; <label>:56                                      ; preds = %0
  %57 = icmp slt i32 %.base, 16
  br i1 %57, label %.preheader, label %71

.preheader:                                       ; preds = %56
  %58 = sext i32 %.base to i64
  br label %59

; <label>:59                                      ; preds = %.preheader, %59
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %59 ]
  %.0 = phi i64 [ %val, %.preheader ], [ %64, %59 ]
  %60 = urem i64 %.0, %58
  %61 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %indvars.iv
  store i8 %62, i8* %63, align 1, !tbaa !1
  %64 = udiv i64 %.0, %58
  %65 = icmp ne i64 %64, 0
  %66 = icmp slt i64 %indvars.iv.next, 511
  %67 = and i1 %66, %65
  br i1 %67, label %59, label %68

; <label>:68                                      ; preds = %59
  %indvars.iv.next.lcssa = phi i64 [ %indvars.iv.next, %59 ]
  %sext = shl i64 %indvars.iv.next.lcssa, 32
  %69 = ashr exact i64 %sext, 32
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %str, i64 0, i64 %69
  store i8 0, i8* %70, align 1, !tbaa !1
  call void @strrev(i8* %1) #3
  br label %72

; <label>:71                                      ; preds = %56
  store i8 0, i8* %1, align 16, !tbaa !1
  br label %72

; <label>:72                                      ; preds = %42, %71, %68, %.preheader3
  %73 = call i64 @strlen(i8* %1) #3
  %74 = call i8* @memcpy(i8* %ostr, i8* %1, i64 %73) #3
  %75 = call i64 @strlen(i8* %1) #3
  %76 = getelementptr inbounds i8, i8* %ostr, i64 %75
  call void @llvm.lifetime.end(i64 256, i8* %1) #1
  ret i8* %76
}

; Function Attrs: noredzone nounwind uwtable
define i32 @vsnprintf(i8* %str, i8* %format, %struct.__va_list_tag* %vl) #0 {
  %str.i = alloca [256 x i8], align 16
  %1 = tail call i64 @strlen(i8* %format) #3
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %.preheader14, label %._crit_edge.45.preheader

._crit_edge.45.preheader:                         ; preds = %0
  br label %._crit_edge.45

.preheader14.loopexit:                            ; preds = %._crit_edge.45
  br label %.preheader14

.preheader14:                                     ; preds = %.preheader14.loopexit, %0
  %3 = call i64 @strlen(i8* %format) #3
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph34

.lr.ph34:                                         ; preds = %.preheader14
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %vl, i64 0, i32 0
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %vl, i64 0, i32 3
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %vl, i64 0, i32 2
  %8 = getelementptr inbounds [256 x i8], [256 x i8]* %str.i, i64 0, i64 0
  br label %11

._crit_edge.45:                                   ; preds = %._crit_edge.45.preheader, %._crit_edge.45
  %i.037 = phi i64 [ %.pre-phi, %._crit_edge.45 ], [ 0, %._crit_edge.45.preheader ]
  %.pre-phi = add i64 %i.037, 1
  %9 = tail call i64 @strlen(i8* %format) #3
  %10 = icmp ult i64 %.pre-phi, %9
  br i1 %10, label %._crit_edge.45, label %.preheader14.loopexit

._crit_edge.loopexit:                             ; preds = %.loopexit
  %.3.lcssa = phi i8* [ %.3, %.loopexit ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader14
  %.0.lcssa = phi i8* [ %str, %.preheader14 ], [ %.3.lcssa, %._crit_edge.loopexit ]
  store i8 0, i8* %.0.lcssa, align 1, !tbaa !1
  ret i32 0

; <label>:11                                      ; preds = %.lr.ph34, %.loopexit
  %.033 = phi i8* [ %str, %.lr.ph34 ], [ %.3, %.loopexit ]
  %i1.032 = phi i64 [ 0, %.lr.ph34 ], [ %242, %.loopexit ]
  %12 = getelementptr inbounds i8, i8* %format, i64 %i1.032
  %13 = load i8, i8* %12, align 1, !tbaa !1
  %14 = icmp eq i8 %13, 37
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %11
  store i8 %13, i8* %.033, align 1, !tbaa !1
  %16 = getelementptr inbounds i8, i8* %.033, i64 1
  br label %.loopexit

; <label>:17                                      ; preds = %11
  %18 = add i64 %i1.032, 1
  br label %.critedge.backedge.thread50

..critedge.loopexit13_crit_edge.unr-lcssa:        ; preds = %130
  br label %..critedge.loopexit13_crit_edge

..critedge.loopexit13_crit_edge:                  ; preds = %.lr.ph.split, %..critedge.loopexit13_crit_edge.unr-lcssa
  %scevgep = getelementptr i8, i8* %.131.lcssa, i64 1
  %scevgep44 = getelementptr i8, i8* %scevgep, i64 %120
  br label %.loopexit

.critedge.backedge.thread50.loopexit:             ; preds = %.lr.ph24
  %.lcssa166 = phi i64 [ %33, %.lr.ph24 ]
  %.lcssa165 = phi i32 [ %32, %.lr.ph24 ]
  br label %.critedge.backedge.thread50.backedge

.critedge.backedge.thread50.loopexit127:          ; preds = %.lr.ph19
  %.lcssa164 = phi i64 [ %71, %.lr.ph19 ]
  %.lcssa = phi i32 [ %70, %.lr.ph19 ]
  br label %.critedge.backedge.thread50.backedge

.critedge.backedge.thread50:                      ; preds = %.critedge.backedge.thread50.backedge, %17
  %.131 = phi i8* [ %.033, %17 ], [ %.131.be, %.critedge.backedge.thread50.backedge ]
  %padding_size.030 = phi i32 [ 0, %17 ], [ %padding_size.030.be, %.critedge.backedge.thread50.backedge ]
  %padding_char.029 = phi i8 [ 32, %17 ], [ %padding_char.029.be, %.critedge.backedge.thread50.backedge ]
  %i1.127 = phi i64 [ %18, %17 ], [ %i1.127.be, %.critedge.backedge.thread50.backedge ]
  %19 = getelementptr inbounds i8, i8* %format, i64 %i1.127
  %20 = load i8, i8* %19, align 1, !tbaa !1
  %21 = sext i8 %20 to i32
  switch i32 %21, label %.critedge.backedge.thread50.backedge [
    i32 48, label %24
    i32 35, label %26
    i32 49, label %.preheader
    i32 50, label %.preheader
    i32 51, label %.preheader
    i32 52, label %.preheader
    i32 53, label %.preheader
    i32 54, label %.preheader
    i32 55, label %.preheader
    i32 56, label %.preheader
    i32 57, label %.preheader
    i32 42, label %39
    i32 46, label %53
    i32 100, label %77
    i32 105, label %77
    i32 117, label %140
    i32 98, label %156
    i32 111, label %172
    i32 120, label %188
    i32 88, label %188
    i32 102, label %204
    i32 70, label %204
    i32 99, label %206
    i32 115, label %222
    i32 37, label %240
  ]

.critedge.backedge.thread50.backedge:             ; preds = %.critedge.backedge.thread50, %50, %26, %24, %65, %63, %.preheader, %.preheader11, %.critedge.backedge.thread50.loopexit, %.critedge.backedge.thread50.loopexit127
  %.131.be = phi i8* [ %.131, %.preheader11 ], [ %.131, %.preheader ], [ %.131, %63 ], [ %.131, %65 ], [ %.131, %24 ], [ %28, %26 ], [ %.131, %50 ], [ %.131, %.critedge.backedge.thread50 ], [ %.131, %.critedge.backedge.thread50.loopexit ], [ %.131, %.critedge.backedge.thread50.loopexit127 ]
  %padding_size.030.be = phi i32 [ %padding_size.030, %.preheader11 ], [ %padding_size.030, %.preheader ], [ %padding_size.030, %63 ], [ %padding_size.030, %65 ], [ %padding_size.030, %24 ], [ %padding_size.030, %26 ], [ %52, %50 ], [ %padding_size.030, %.critedge.backedge.thread50 ], [ %.lcssa165, %.critedge.backedge.thread50.loopexit ], [ %.lcssa, %.critedge.backedge.thread50.loopexit127 ]
  %padding_char.029.be = phi i8 [ %padding_char.029, %.preheader11 ], [ %padding_char.029, %.preheader ], [ %padding_char.029, %63 ], [ %padding_char.029, %65 ], [ 48, %24 ], [ %padding_char.029, %26 ], [ %padding_char.029, %50 ], [ %padding_char.029, %.critedge.backedge.thread50 ], [ %padding_char.029, %.critedge.backedge.thread50.loopexit ], [ %padding_char.029, %.critedge.backedge.thread50.loopexit127 ]
  %i1.127.be = phi i64 [ %54, %.preheader11 ], [ %i1.127, %.preheader ], [ %54, %63 ], [ %54, %65 ], [ %25, %24 ], [ %29, %26 ], [ %i1.127, %50 ], [ %i1.127, %.critedge.backedge.thread50 ], [ %.lcssa166, %.critedge.backedge.thread50.loopexit ], [ %.lcssa164, %.critedge.backedge.thread50.loopexit127 ]
  br label %.critedge.backedge.thread50

.preheader:                                       ; preds = %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50, %.critedge.backedge.thread50
  %22 = add nsw i32 %21, -48
  %23 = icmp ult i32 %22, 10
  br i1 %23, label %.lr.ph24.preheader, label %.critedge.backedge.thread50.backedge

.lr.ph24.preheader:                               ; preds = %.preheader
  br label %.lr.ph24

; <label>:24                                      ; preds = %.critedge.backedge.thread50
  %25 = add i64 %i1.127, 1
  br label %.critedge.backedge.thread50.backedge

; <label>:26                                      ; preds = %.critedge.backedge.thread50
  %27 = getelementptr inbounds i8, i8* %.131, i64 1
  store i8 48, i8* %.131, align 1, !tbaa !1
  %28 = getelementptr inbounds i8, i8* %.131, i64 2
  store i8 120, i8* %27, align 1, !tbaa !1
  %29 = add i64 %i1.127, 1
  br label %.critedge.backedge.thread50.backedge

.lr.ph24:                                         ; preds = %.lr.ph24.preheader, %.lr.ph24
  %30 = phi i32 [ %37, %.lr.ph24 ], [ %22, %.lr.ph24.preheader ]
  %padding_size.123 = phi i32 [ %32, %.lr.ph24 ], [ %padding_size.030, %.lr.ph24.preheader ]
  %i1.222 = phi i64 [ %33, %.lr.ph24 ], [ %i1.127, %.lr.ph24.preheader ]
  %31 = mul nsw i32 %padding_size.123, 10
  %32 = add nsw i32 %30, %31
  %33 = add i64 %i1.222, 1
  %34 = getelementptr inbounds i8, i8* %format, i64 %33
  %35 = load i8, i8* %34, align 1, !tbaa !1
  %36 = sext i8 %35 to i32
  %37 = add nsw i32 %36, -48
  %38 = icmp ult i32 %37, 10
  br i1 %38, label %.lr.ph24, label %.critedge.backedge.thread50.loopexit

; <label>:39                                      ; preds = %.critedge.backedge.thread50
  %40 = load i32, i32* %5, align 4
  %41 = icmp ult i32 %40, 41
  br i1 %41, label %42, label %47

; <label>:42                                      ; preds = %39
  %43 = load i8*, i8** %6, align 8
  %44 = sext i32 %40 to i64
  %45 = getelementptr i8, i8* %43, i64 %44
  %46 = add i32 %40, 8
  store i32 %46, i32* %5, align 4
  br label %50

; <label>:47                                      ; preds = %39
  %48 = load i8*, i8** %7, align 8
  %49 = getelementptr i8, i8* %48, i64 8
  store i8* %49, i8** %7, align 8
  br label %50

; <label>:50                                      ; preds = %47, %42
  %.in.9 = phi i8* [ %45, %42 ], [ %48, %47 ]
  %51 = bitcast i8* %.in.9 to i32*
  %52 = load i32, i32* %51, align 4
  br label %.critedge.backedge.thread50.backedge

; <label>:53                                      ; preds = %.critedge.backedge.thread50
  %54 = add i64 %i1.127, 1
  %55 = getelementptr inbounds i8, i8* %format, i64 %54
  %56 = load i8, i8* %55, align 1, !tbaa !1
  %cond = icmp eq i8 %56, 42
  br i1 %cond, label %60, label %.preheader11

.preheader11:                                     ; preds = %53
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %57, -48
  %59 = icmp ult i32 %58, 10
  br i1 %59, label %.lr.ph19.preheader, label %.critedge.backedge.thread50.backedge

.lr.ph19.preheader:                               ; preds = %.preheader11
  br label %.lr.ph19

; <label>:60                                      ; preds = %53
  %61 = load i32, i32* %5, align 4
  %62 = icmp ult i32 %61, 41
  br i1 %62, label %63, label %65

; <label>:63                                      ; preds = %60
  %64 = add i32 %61, 8
  store i32 %64, i32* %5, align 4
  br label %.critedge.backedge.thread50.backedge

; <label>:65                                      ; preds = %60
  %66 = load i8*, i8** %7, align 8
  %67 = getelementptr i8, i8* %66, i64 8
  store i8* %67, i8** %7, align 8
  br label %.critedge.backedge.thread50.backedge

.lr.ph19:                                         ; preds = %.lr.ph19.preheader, %.lr.ph19
  %68 = phi i32 [ %75, %.lr.ph19 ], [ %58, %.lr.ph19.preheader ]
  %padding_size.218 = phi i32 [ %70, %.lr.ph19 ], [ %padding_size.030, %.lr.ph19.preheader ]
  %i1.317 = phi i64 [ %71, %.lr.ph19 ], [ %54, %.lr.ph19.preheader ]
  %69 = mul nsw i32 %padding_size.218, 10
  %70 = add nsw i32 %68, %69
  %71 = add i64 %i1.317, 1
  %72 = getelementptr inbounds i8, i8* %format, i64 %71
  %73 = load i8, i8* %72, align 1, !tbaa !1
  %74 = sext i8 %73 to i32
  %75 = add nsw i32 %74, -48
  %76 = icmp ult i32 %75, 10
  br i1 %76, label %.lr.ph19, label %.critedge.backedge.thread50.loopexit127

; <label>:77                                      ; preds = %.critedge.backedge.thread50, %.critedge.backedge.thread50
  %i1.127.lcssa = phi i64 [ %i1.127, %.critedge.backedge.thread50 ], [ %i1.127, %.critedge.backedge.thread50 ]
  %padding_char.029.lcssa = phi i8 [ %padding_char.029, %.critedge.backedge.thread50 ], [ %padding_char.029, %.critedge.backedge.thread50 ]
  %padding_size.030.lcssa = phi i32 [ %padding_size.030, %.critedge.backedge.thread50 ], [ %padding_size.030, %.critedge.backedge.thread50 ]
  %.131.lcssa = phi i8* [ %.131, %.critedge.backedge.thread50 ], [ %.131, %.critedge.backedge.thread50 ]
  %78 = load i32, i32* %5, align 4
  %79 = icmp ult i32 %78, 41
  br i1 %79, label %80, label %85

; <label>:80                                      ; preds = %77
  %81 = load i8*, i8** %6, align 8
  %82 = sext i32 %78 to i64
  %83 = getelementptr i8, i8* %81, i64 %82
  %84 = add i32 %78, 8
  store i32 %84, i32* %5, align 4
  br label %88

; <label>:85                                      ; preds = %77
  %86 = load i8*, i8** %7, align 8
  %87 = getelementptr i8, i8* %86, i64 8
  store i8* %87, i8** %7, align 8
  br label %88

; <label>:88                                      ; preds = %85, %80
  %.in.8 = phi i8* [ %83, %80 ], [ %86, %85 ]
  %89 = bitcast i8* %.in.8 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = sext i32 %90 to i64
  call void @llvm.lifetime.start(i64 256, i8* %8) #1
  %92 = icmp slt i32 %90, 0
  %93 = sub nsw i64 0, %91
  %.val.i = select i1 %92, i64 %93, i64 %91
  br label %94

; <label>:94                                      ; preds = %94, %88
  %indvars.iv.i = phi i64 [ 0, %88 ], [ %indvars.iv.next.i, %94 ]
  %.0.i = phi i64 [ %.val.i, %88 ], [ %99, %94 ]
  %95 = srem i64 %.0.i, 10
  %96 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* %str.i, i64 0, i64 %indvars.iv.i
  store i8 %97, i8* %98, align 1, !tbaa !1
  %99 = sdiv i64 %.0.i, 10
  %.0.i.off = add nsw i64 %.0.i, 9
  %100 = icmp ult i64 %.0.i.off, 19
  br i1 %100, label %101, label %94

; <label>:101                                     ; preds = %94
  %indvars.iv.next.i.lcssa = phi i64 [ %indvars.iv.next.i, %94 ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %94 ]
  %102 = icmp sgt i32 %90, -1
  br i1 %102, label %itoa.exit, label %103

; <label>:103                                     ; preds = %101
  %104 = add i64 %indvars.iv.i.lcssa, 2
  %sext10.i = shl i64 %indvars.iv.next.i.lcssa, 32
  %105 = ashr exact i64 %sext10.i, 32
  %106 = getelementptr inbounds [256 x i8], [256 x i8]* %str.i, i64 0, i64 %105
  store i8 45, i8* %106, align 1, !tbaa !1
  br label %itoa.exit

itoa.exit:                                        ; preds = %101, %103
  %pos.1.i = phi i64 [ %104, %103 ], [ %indvars.iv.next.i.lcssa, %101 ]
  %sext11.i = shl i64 %pos.1.i, 32
  %107 = ashr exact i64 %sext11.i, 32
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* %str.i, i64 0, i64 %107
  store i8 0, i8* %108, align 1, !tbaa !1
  call void @strrev(i8* %8) #3
  %109 = call i64 @strlen(i8* %8) #3
  %110 = call i8* @memcpy(i8* %.131.lcssa, i8* %8, i64 %109) #3
  %111 = call i64 @strlen(i8* %8) #3
  call void @llvm.lifetime.end(i64 256, i8* %8) #1
  %112 = trunc i64 %111 to i32
  %113 = add i32 %112, 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %.131.lcssa, i64 %114
  %116 = icmp slt i32 %113, %padding_size.030.lcssa
  br i1 %116, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %itoa.exit
  %117 = add i32 %padding_size.030.lcssa, -2
  %118 = sub i32 %117, %112
  %119 = zext i32 %118 to i64
  %120 = add nsw i64 %114, %119
  %121 = add i32 %padding_size.030.lcssa, 7
  %122 = trunc i64 %111 to i32
  %123 = sub i32 %121, %122
  %124 = add i32 %padding_size.030.lcssa, -2
  %125 = sub i32 %124, %122
  %xtraiter = and i32 %123, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %.preheader163

.preheader163:                                    ; preds = %.lr.ph
  br label %126

; <label>:126                                     ; preds = %126, %.preheader163
  %.216.prol = phi i8* [ %127, %126 ], [ %115, %.preheader163 ]
  %len.015.prol = phi i32 [ %128, %126 ], [ %113, %.preheader163 ]
  %prol.iter = phi i32 [ %prol.iter.sub, %126 ], [ %xtraiter, %.preheader163 ]
  %127 = getelementptr inbounds i8, i8* %.216.prol, i64 1
  store i8 %padding_char.029.lcssa, i8* %.216.prol, align 1, !tbaa !1
  %128 = add nsw i32 %len.015.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.split.loopexit, label %126, !llvm.loop !4

.lr.ph.split.loopexit:                            ; preds = %126
  %.lcssa200 = phi i32 [ %128, %126 ]
  %.lcssa199 = phi i8* [ %127, %126 ]
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %.lr.ph, %.lr.ph.split.loopexit
  %.216.unr = phi i8* [ %115, %.lr.ph ], [ %.lcssa199, %.lr.ph.split.loopexit ]
  %len.015.unr = phi i32 [ %113, %.lr.ph ], [ %.lcssa200, %.lr.ph.split.loopexit ]
  %129 = icmp ult i32 %125, 7
  br i1 %129, label %..critedge.loopexit13_crit_edge, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %130

; <label>:130                                     ; preds = %130, %.lr.ph.split.split
  %.216 = phi i8* [ %.216.unr, %.lr.ph.split.split ], [ %138, %130 ]
  %len.015 = phi i32 [ %len.015.unr, %.lr.ph.split.split ], [ %139, %130 ]
  %131 = getelementptr inbounds i8, i8* %.216, i64 1
  store i8 %padding_char.029.lcssa, i8* %.216, align 1, !tbaa !1
  %132 = getelementptr inbounds i8, i8* %.216, i64 2
  store i8 %padding_char.029.lcssa, i8* %131, align 1, !tbaa !1
  %133 = getelementptr inbounds i8, i8* %.216, i64 3
  store i8 %padding_char.029.lcssa, i8* %132, align 1, !tbaa !1
  %134 = getelementptr inbounds i8, i8* %.216, i64 4
  store i8 %padding_char.029.lcssa, i8* %133, align 1, !tbaa !1
  %135 = getelementptr inbounds i8, i8* %.216, i64 5
  store i8 %padding_char.029.lcssa, i8* %134, align 1, !tbaa !1
  %136 = getelementptr inbounds i8, i8* %.216, i64 6
  store i8 %padding_char.029.lcssa, i8* %135, align 1, !tbaa !1
  %137 = getelementptr inbounds i8, i8* %.216, i64 7
  store i8 %padding_char.029.lcssa, i8* %136, align 1, !tbaa !1
  %138 = getelementptr inbounds i8, i8* %.216, i64 8
  store i8 %padding_char.029.lcssa, i8* %137, align 1, !tbaa !1
  %139 = add nsw i32 %len.015, 8
  %exitcond.7 = icmp eq i32 %139, %padding_size.030.lcssa
  br i1 %exitcond.7, label %..critedge.loopexit13_crit_edge.unr-lcssa, label %130

; <label>:140                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa191 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa167 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %141 = load i32, i32* %5, align 4
  %142 = icmp ult i32 %141, 41
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = load i8*, i8** %6, align 8
  %145 = sext i32 %141 to i64
  %146 = getelementptr i8, i8* %144, i64 %145
  %147 = add i32 %141, 8
  store i32 %147, i32* %5, align 4
  br label %151

; <label>:148                                     ; preds = %140
  %149 = load i8*, i8** %7, align 8
  %150 = getelementptr i8, i8* %149, i64 8
  store i8* %150, i8** %7, align 8
  br label %151

; <label>:151                                     ; preds = %148, %143
  %.in.7 = phi i8* [ %146, %143 ], [ %149, %148 ]
  %152 = bitcast i8* %.in.7 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  %155 = call i8* @utoa(i64 %154, i8* %.131.lcssa167, i32 10) #4
  br label %.loopexit

; <label>:156                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa192 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa168 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %157 = load i32, i32* %5, align 4
  %158 = icmp ult i32 %157, 41
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = load i8*, i8** %6, align 8
  %161 = sext i32 %157 to i64
  %162 = getelementptr i8, i8* %160, i64 %161
  %163 = add i32 %157, 8
  store i32 %163, i32* %5, align 4
  br label %167

; <label>:164                                     ; preds = %156
  %165 = load i8*, i8** %7, align 8
  %166 = getelementptr i8, i8* %165, i64 8
  store i8* %166, i8** %7, align 8
  br label %167

; <label>:167                                     ; preds = %164, %159
  %.in.6 = phi i8* [ %162, %159 ], [ %165, %164 ]
  %168 = bitcast i8* %.in.6 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i64
  %171 = call i8* @utoa(i64 %170, i8* %.131.lcssa168, i32 2) #4
  br label %.loopexit

; <label>:172                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa193 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa169 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %173 = load i32, i32* %5, align 4
  %174 = icmp ult i32 %173, 41
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = load i8*, i8** %6, align 8
  %177 = sext i32 %173 to i64
  %178 = getelementptr i8, i8* %176, i64 %177
  %179 = add i32 %173, 8
  store i32 %179, i32* %5, align 4
  br label %183

; <label>:180                                     ; preds = %172
  %181 = load i8*, i8** %7, align 8
  %182 = getelementptr i8, i8* %181, i64 8
  store i8* %182, i8** %7, align 8
  br label %183

; <label>:183                                     ; preds = %180, %175
  %.in.5 = phi i8* [ %178, %175 ], [ %181, %180 ]
  %184 = bitcast i8* %.in.5 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = zext i32 %185 to i64
  %187 = call i8* @utoa(i64 %186, i8* %.131.lcssa169, i32 8) #4
  br label %.loopexit

; <label>:188                                     ; preds = %.critedge.backedge.thread50, %.critedge.backedge.thread50
  %i1.127.lcssa194 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ], [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa170 = phi i8* [ %.131, %.critedge.backedge.thread50 ], [ %.131, %.critedge.backedge.thread50 ]
  %189 = load i32, i32* %5, align 4
  %190 = icmp ult i32 %189, 41
  br i1 %190, label %191, label %196

; <label>:191                                     ; preds = %188
  %192 = load i8*, i8** %6, align 8
  %193 = sext i32 %189 to i64
  %194 = getelementptr i8, i8* %192, i64 %193
  %195 = add i32 %189, 8
  store i32 %195, i32* %5, align 4
  br label %199

; <label>:196                                     ; preds = %188
  %197 = load i8*, i8** %7, align 8
  %198 = getelementptr i8, i8* %197, i64 8
  store i8* %198, i8** %7, align 8
  br label %199

; <label>:199                                     ; preds = %196, %191
  %.in.4 = phi i8* [ %194, %191 ], [ %197, %196 ]
  %200 = bitcast i8* %.in.4 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i64
  %203 = call i8* @utoa(i64 %202, i8* %.131.lcssa170, i32 16) #4
  br label %.loopexit

; <label>:204                                     ; preds = %.critedge.backedge.thread50, %.critedge.backedge.thread50
  %i1.127.lcssa195 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ], [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa171 = phi i8* [ %.131, %.critedge.backedge.thread50 ], [ %.131, %.critedge.backedge.thread50 ]
  %205 = getelementptr inbounds i8, i8* %.131.lcssa171, i64 1
  br label %.loopexit

; <label>:206                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa196 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa172 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %207 = load i32, i32* %5, align 4
  %208 = icmp ult i32 %207, 41
  br i1 %208, label %209, label %214

; <label>:209                                     ; preds = %206
  %210 = load i8*, i8** %6, align 8
  %211 = sext i32 %207 to i64
  %212 = getelementptr i8, i8* %210, i64 %211
  %213 = add i32 %207, 8
  store i32 %213, i32* %5, align 4
  br label %217

; <label>:214                                     ; preds = %206
  %215 = load i8*, i8** %7, align 8
  %216 = getelementptr i8, i8* %215, i64 8
  store i8* %216, i8** %7, align 8
  br label %217

; <label>:217                                     ; preds = %214, %209
  %.in.3 = phi i8* [ %212, %209 ], [ %215, %214 ]
  %218 = bitcast i8* %.in.3 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds i8, i8* %.131.lcssa172, i64 1
  store i8 %220, i8* %.131.lcssa172, align 1, !tbaa !1
  br label %.loopexit

; <label>:222                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa197 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa173 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %223 = load i32, i32* %5, align 4
  %224 = icmp ult i32 %223, 41
  br i1 %224, label %225, label %230

; <label>:225                                     ; preds = %222
  %226 = load i8*, i8** %6, align 8
  %227 = sext i32 %223 to i64
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = add i32 %223, 8
  store i32 %229, i32* %5, align 4
  br label %233

; <label>:230                                     ; preds = %222
  %231 = load i8*, i8** %7, align 8
  %232 = getelementptr i8, i8* %231, i64 8
  store i8* %232, i8** %7, align 8
  br label %233

; <label>:233                                     ; preds = %230, %225
  %.in = phi i8* [ %228, %225 ], [ %231, %230 ]
  %234 = bitcast i8* %.in to i8**
  %235 = load i8*, i8** %234, align 8
  %236 = call i64 @strlen(i8* %235) #3
  %237 = call i8* @memcpy(i8* %.131.lcssa173, i8* %235, i64 %236) #3
  %238 = call i64 @strlen(i8* %235) #3
  %239 = getelementptr inbounds i8, i8* %.131.lcssa173, i64 %238
  br label %.loopexit

; <label>:240                                     ; preds = %.critedge.backedge.thread50
  %i1.127.lcssa198 = phi i64 [ %i1.127, %.critedge.backedge.thread50 ]
  %.131.lcssa174 = phi i8* [ %.131, %.critedge.backedge.thread50 ]
  %241 = getelementptr inbounds i8, i8* %.131.lcssa174, i64 1
  store i8 37, i8* %.131.lcssa174, align 1, !tbaa !1
  br label %.loopexit

.loopexit:                                        ; preds = %itoa.exit, %..critedge.loopexit13_crit_edge, %151, %167, %183, %199, %204, %217, %233, %240, %15
  %i1.4 = phi i64 [ %i1.032, %15 ], [ %i1.127.lcssa198, %240 ], [ %i1.127.lcssa197, %233 ], [ %i1.127.lcssa196, %217 ], [ %i1.127.lcssa195, %204 ], [ %i1.127.lcssa194, %199 ], [ %i1.127.lcssa193, %183 ], [ %i1.127.lcssa192, %167 ], [ %i1.127.lcssa191, %151 ], [ %i1.127.lcssa, %..critedge.loopexit13_crit_edge ], [ %i1.127.lcssa, %itoa.exit ]
  %.3 = phi i8* [ %16, %15 ], [ %241, %240 ], [ %239, %233 ], [ %221, %217 ], [ %205, %204 ], [ %203, %199 ], [ %187, %183 ], [ %171, %167 ], [ %155, %151 ], [ %scevgep44, %..critedge.loopexit13_crit_edge ], [ %115, %itoa.exit ]
  %242 = add i64 %i1.4, 1
  %243 = call i64 @strlen(i8* %format) #3
  %244 = icmp ult i64 %242, %243
  br i1 %244, label %11, label %._crit_edge.loopexit
}

; Function Attrs: noredzone nounwind uwtable
define i32 @sprintf(i8* %str, i8* %format, ...) #0 {
  %vl = alloca [1 x %struct.__va_list_tag], align 16
  %1 = bitcast [1 x %struct.__va_list_tag]* %vl to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #1
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vl, i64 0, i64 0
  call void @llvm.va_start(i8* %1)
  %3 = call i32 @vsnprintf(i8* %str, i8* %format, %struct.__va_list_tag* %2) #4
  call void @llvm.va_end(i8* %1)
  call void @llvm.lifetime.end(i64 24, i8* %1) #1
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin noredzone nounwind }
attributes #4 = { nobuiltin noredzone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
