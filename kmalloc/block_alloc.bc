; ModuleID = 'kmalloc/block_alloc.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-none--elf"

@initialized = internal unnamed_addr global i1 false
@_smallH_Loc = internal unnamed_addr global i8* null, align 8
@_largeH_Loc = internal unnamed_addr global i8* null, align 8
@_smallH_Blocks = internal global [2097152 x i8] zeroinitializer, align 16
@_largeH_Blocks = internal global [0 x i8] zeroinitializer, align 1

; Function Attrs: noredzone nounwind uwtable
define i32 @Balloc_Initialize() #0 {
  %.b = load i1, i1* @initialized, align 1
  br i1 %.b, label %8, label %1

; <label>:1                                       ; preds = %0
  %2 = tail call i8* @kmalloc(i64 67108864) #3
  %3 = ptrtoint i8* %2 to i64
  store i8* %2, i8** @_smallH_Loc, align 8, !tbaa !1
  %4 = add i64 %3, 67108864
  %5 = inttoptr i64 %4 to i8*
  store i8* %5, i8** @_largeH_Loc, align 8, !tbaa !1
  %6 = tail call i8* @memset(i8* getelementptr inbounds ([2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 0), i32 0, i64 2097152) #3
  %7 = tail call i8* @memset(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_largeH_Blocks, i64 0, i64 0), i32 0, i64 0) #3
  store i1 true, i1* @initialized, align 1
  br label %8

; <label>:8                                       ; preds = %0, %1
  ret i32 0
}

; Function Attrs: noredzone
declare i8* @kmalloc(i64) #1

; Function Attrs: noredzone
declare i8* @memset(i8*, i32, i64) #1

; Function Attrs: noredzone nounwind uwtable
define i64 @_allocBlockSet(i64 %startIndex, i64 %blockCount, i8* %blockData, i64 %blockEntries, i8* nocapture readnone %baseLoc, i64 %blockSize) #0 {
  %1 = icmp eq i64 %blockCount, 0
  br i1 %1, label %tailrecurse.preheader, label %tailrecurse.us.preheader

tailrecurse.us.preheader:                         ; preds = %0
  br label %tailrecurse.us

tailrecurse.preheader:                            ; preds = %0
  %2 = icmp ult i64 %startIndex, %blockEntries
  br i1 %2, label %.lr.ph.preheader, label %.critedge

.lr.ph.preheader:                                 ; preds = %tailrecurse.preheader
  br label %.lr.ph

tailrecurse.us:                                   ; preds = %tailrecurse.us.preheader, %tailrecurse.backedge.us
  %blockIndex.0.us = phi i64 [ %blockIndex.0.be.us, %tailrecurse.backedge.us ], [ %startIndex, %tailrecurse.us.preheader ]
  %3 = icmp ult i64 %blockIndex.0.us, %blockEntries
  br i1 %3, label %4, label %.critedge.us

; <label>:4                                       ; preds = %tailrecurse.us
  %5 = getelementptr inbounds i8, i8* %blockData, i64 %blockIndex.0.us
  %6 = load i8, i8* %5, align 1, !tbaa !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.critedge.us, label %tailrecurse.backedge.us

.critedge.us:                                     ; preds = %4, %tailrecurse.us
  %8 = icmp eq i64 %blockIndex.0.us, %blockEntries
  %9 = zext i1 %8 to i32
  %10 = add i64 %blockIndex.0.us, %blockCount
  %11 = icmp ugt i64 %10, %blockEntries
  %12 = zext i1 %11 to i32
  %13 = or i32 %12, %9
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %.lr.ph.us.preheader, label %.loopexit.loopexit

.lr.ph.us.preheader:                              ; preds = %.critedge.us
  br label %.lr.ph.us

; <label>:15                                      ; preds = %.lr.ph.us
  %16 = icmp ult i64 %21, %blockCount
  br i1 %16, label %.lr.ph.us, label %.preheader._crit_edge.loopexit

.lr.ph.us:                                        ; preds = %.lr.ph.us.preheader, %15
  %i.05.us = phi i64 [ %21, %15 ], [ 0, %.lr.ph.us.preheader ]
  %17 = add i64 %i.05.us, %blockIndex.0.us
  %18 = getelementptr inbounds i8, i8* %blockData, i64 %17
  %19 = load i8, i8* %18, align 1, !tbaa !5
  %20 = icmp eq i8 %19, 0
  %21 = add nuw i64 %i.05.us, 1
  br i1 %20, label %15, label %tailrecurse.backedge.us.loopexit

tailrecurse.backedge.us.loopexit:                 ; preds = %.lr.ph.us
  %.lcssa = phi i64 [ %17, %.lr.ph.us ]
  br label %tailrecurse.backedge.us

tailrecurse.backedge.us:                          ; preds = %tailrecurse.backedge.us.loopexit, %4
  %blockIndex.0.be.us.in = phi i64 [ %blockIndex.0.us, %4 ], [ %.lcssa, %tailrecurse.backedge.us.loopexit ]
  %blockIndex.0.be.us = add i64 %blockIndex.0.be.us.in, 1
  br label %tailrecurse.us

.lr.ph:                                           ; preds = %.lr.ph.preheader, %tailrecurse.backedge
  %blockIndex.028 = phi i64 [ %25, %tailrecurse.backedge ], [ %startIndex, %.lr.ph.preheader ]
  %22 = getelementptr inbounds i8, i8* %blockData, i64 %blockIndex.028
  %23 = load i8, i8* %22, align 1, !tbaa !5
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %.critedge.loopexit, label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %.lr.ph
  %25 = add i64 %blockIndex.028, 1
  %26 = icmp ult i64 %25, %blockEntries
  br i1 %26, label %.lr.ph, label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %.lr.ph, %tailrecurse.backedge
  %blockIndex.0.lcssa.ph = phi i64 [ %25, %tailrecurse.backedge ], [ %blockIndex.028, %.lr.ph ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %tailrecurse.preheader
  %blockIndex.0.lcssa = phi i64 [ %startIndex, %tailrecurse.preheader ], [ %blockIndex.0.lcssa.ph, %.critedge.loopexit ]
  %27 = icmp ult i64 %blockIndex.0.lcssa, %blockEntries
  br i1 %27, label %.preheader._crit_edge, label %.loopexit

.preheader._crit_edge.loopexit:                   ; preds = %15
  %.lcssa37 = phi i64 [ %10, %15 ]
  %blockIndex.0.us.lcssa35 = phi i64 [ %blockIndex.0.us, %15 ]
  br label %.preheader._crit_edge

.preheader._crit_edge:                            ; preds = %.preheader._crit_edge.loopexit, %.critedge
  %.lcssa4 = phi i64 [ %blockIndex.0.lcssa, %.critedge ], [ %.lcssa37, %.preheader._crit_edge.loopexit ]
  %blockIndex.0.lcssa2 = phi i64 [ %blockIndex.0.lcssa, %.critedge ], [ %blockIndex.0.us.lcssa35, %.preheader._crit_edge.loopexit ]
  %28 = icmp ugt i64 %blockCount, 2
  br i1 %28, label %.thread, label %35

.thread:                                          ; preds = %.preheader._crit_edge
  %29 = add i64 %blockIndex.0.lcssa2, 1
  %30 = getelementptr inbounds i8, i8* %blockData, i64 %29
  %31 = shl i64 %blockCount, 2
  %32 = add i64 %31, -8
  %33 = tail call i8* @memset(i8* %30, i32 1, i64 %32) #3
  %34 = getelementptr inbounds i8, i8* %blockData, i64 %blockIndex.0.lcssa2
  store i8 2, i8* %34, align 1, !tbaa !5
  br label %38

; <label>:35                                      ; preds = %.preheader._crit_edge
  %36 = getelementptr inbounds i8, i8* %blockData, i64 %blockIndex.0.lcssa2
  store i8 2, i8* %36, align 1, !tbaa !5
  %37 = icmp ugt i64 %blockCount, 1
  br i1 %37, label %38, label %41

; <label>:38                                      ; preds = %.thread, %35
  %39 = add i64 %.lcssa4, -1
  %40 = getelementptr inbounds i8, i8* %blockData, i64 %39
  store i8 4, i8* %40, align 1, !tbaa !5
  br label %.loopexit

; <label>:41                                      ; preds = %35
  store i8 6, i8* %36, align 1, !tbaa !5
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.critedge.us
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.critedge, %38, %41
  %.1 = phi i64 [ %blockIndex.0.lcssa2, %41 ], [ %blockIndex.0.lcssa2, %38 ], [ -1, %.critedge ], [ -1, %.loopexit.loopexit ]
  ret i64 %.1
}

; Function Attrs: noredzone nounwind uwtable
define i64 @Balloc_Alloc(i64 %size) #0 {
  %.b = load i1, i1* @initialized, align 1
  br i1 %.b, label %7, label %Balloc_Initialize.exit

Balloc_Initialize.exit:                           ; preds = %0
  %1 = tail call i8* @kmalloc(i64 67108864) #3
  %2 = ptrtoint i8* %1 to i64
  store i8* %1, i8** @_smallH_Loc, align 8, !tbaa !1
  %3 = add i64 %2, 67108864
  %4 = inttoptr i64 %3 to i8*
  store i8* %4, i8** @_largeH_Loc, align 8, !tbaa !1
  %5 = tail call i8* @memset(i8* getelementptr inbounds ([2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 0), i32 0, i64 2097152) #3
  %6 = tail call i8* @memset(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_largeH_Blocks, i64 0, i64 0), i32 0, i64 0) #3
  store i1 true, i1* @initialized, align 1
  br label %7

; <label>:7                                       ; preds = %Balloc_Initialize.exit, %0
  %8 = icmp ugt i64 %size, 4095
  br i1 %8, label %_allocBlockSet.exit, label %9

; <label>:9                                       ; preds = %7
  %10 = lshr i64 %size, 5
  %11 = shl nuw i64 %10, 5
  %12 = icmp ult i64 %11, %size
  %13 = zext i1 %12 to i64
  %.2 = add nuw nsw i64 %13, %10
  %14 = icmp eq i64 %.2, 0
  br i1 %14, label %tailrecurse.i.9.preheader.preheader, label %tailrecurse.us.i.4.preheader

tailrecurse.us.i.4.preheader:                     ; preds = %9
  br label %tailrecurse.us.i.4

tailrecurse.i.9.preheader.preheader:              ; preds = %9
  br label %tailrecurse.i.9.preheader

tailrecurse.us.i.4:                               ; preds = %tailrecurse.us.i.4.preheader, %tailrecurse.backedge.us.i.8
  %blockIndex.0.us.i.3 = phi i64 [ %blockIndex.0.be.us.i.7, %tailrecurse.backedge.us.i.8 ], [ 0, %tailrecurse.us.i.4.preheader ]
  %15 = icmp ult i64 %blockIndex.0.us.i.3, 2097152
  br i1 %15, label %16, label %.critedge.us.i

; <label>:16                                      ; preds = %tailrecurse.us.i.4
  %17 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockIndex.0.us.i.3
  %18 = load i8, i8* %17, align 1, !tbaa !5
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %.critedge.us.i, label %tailrecurse.backedge.us.i.8

.critedge.us.i:                                   ; preds = %16, %tailrecurse.us.i.4
  %20 = icmp eq i64 %blockIndex.0.us.i.3, 2097152
  %21 = zext i1 %20 to i32
  %22 = add i64 %blockIndex.0.us.i.3, %.2
  %23 = icmp ugt i64 %22, 2097152
  %24 = zext i1 %23 to i32
  %25 = or i32 %24, %21
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %.lr.ph.us.i.6.preheader, label %_allocBlockSet.exit.loopexit50

.lr.ph.us.i.6.preheader:                          ; preds = %.critedge.us.i
  br label %.lr.ph.us.i.6

; <label>:27                                      ; preds = %.lr.ph.us.i.6
  %28 = icmp ult i64 %33, %.2
  br i1 %28, label %.lr.ph.us.i.6, label %.preheader._crit_edge.i.10.loopexit49

.lr.ph.us.i.6:                                    ; preds = %.lr.ph.us.i.6.preheader, %27
  %i.05.us.i.5 = phi i64 [ %33, %27 ], [ 0, %.lr.ph.us.i.6.preheader ]
  %29 = add i64 %i.05.us.i.5, %blockIndex.0.us.i.3
  %30 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1, !tbaa !5
  %32 = icmp eq i8 %31, 0
  %33 = add nuw nsw i64 %i.05.us.i.5, 1
  br i1 %32, label %27, label %tailrecurse.backedge.us.i.8.loopexit

tailrecurse.backedge.us.i.8.loopexit:             ; preds = %.lr.ph.us.i.6
  %.lcssa = phi i64 [ %29, %.lr.ph.us.i.6 ]
  br label %tailrecurse.backedge.us.i.8

tailrecurse.backedge.us.i.8:                      ; preds = %tailrecurse.backedge.us.i.8.loopexit, %16
  %blockIndex.0.be.us.in.i = phi i64 [ %blockIndex.0.us.i.3, %16 ], [ %.lcssa, %tailrecurse.backedge.us.i.8.loopexit ]
  %blockIndex.0.be.us.i.7 = add i64 %blockIndex.0.be.us.in.i, 1
  br label %tailrecurse.us.i.4

tailrecurse.i.9.preheader:                        ; preds = %tailrecurse.backedge.i.3, %tailrecurse.i.9.preheader.preheader
  %blockIndex.0.i28 = phi i64 [ 0, %tailrecurse.i.9.preheader.preheader ], [ %63, %tailrecurse.backedge.i.3 ]
  %34 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockIndex.0.i28
  %35 = load i8, i8* %34, align 4, !tbaa !5
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %.preheader._crit_edge.i.10.loopexit, label %tailrecurse.backedge.i

tailrecurse.backedge.i:                           ; preds = %tailrecurse.i.9.preheader
  %37 = or i64 %blockIndex.0.i28, 1
  %38 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1, !tbaa !5
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %.preheader._crit_edge.i.10.loopexit, label %tailrecurse.backedge.i.1

.preheader._crit_edge.i.10.loopexit:              ; preds = %tailrecurse.backedge.i.2, %tailrecurse.backedge.i.1, %tailrecurse.backedge.i, %tailrecurse.i.9.preheader
  %blockIndex.0.i28.lcssa = phi i64 [ %blockIndex.0.i28, %tailrecurse.i.9.preheader ], [ %37, %tailrecurse.backedge.i ], [ %55, %tailrecurse.backedge.i.1 ], [ %59, %tailrecurse.backedge.i.2 ]
  br label %.preheader._crit_edge.i.10

.preheader._crit_edge.i.10.loopexit49:            ; preds = %27
  %.lcssa59 = phi i64 [ %22, %27 ]
  %blockIndex.0.us.i.3.lcssa57 = phi i64 [ %blockIndex.0.us.i.3, %27 ]
  br label %.preheader._crit_edge.i.10

.preheader._crit_edge.i.10:                       ; preds = %.preheader._crit_edge.i.10.loopexit49, %.preheader._crit_edge.i.10.loopexit
  %.lcssa4.i = phi i64 [ %blockIndex.0.i28.lcssa, %.preheader._crit_edge.i.10.loopexit ], [ %.lcssa59, %.preheader._crit_edge.i.10.loopexit49 ]
  %blockIndex.0.lcssa2.i = phi i64 [ %blockIndex.0.i28.lcssa, %.preheader._crit_edge.i.10.loopexit ], [ %blockIndex.0.us.i.3.lcssa57, %.preheader._crit_edge.i.10.loopexit49 ]
  %41 = icmp ugt i64 %.2, 2
  br i1 %41, label %.thread.i.11, label %48

.thread.i.11:                                     ; preds = %.preheader._crit_edge.i.10
  %42 = add i64 %blockIndex.0.lcssa2.i, 1
  %43 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %42
  %44 = shl nuw nsw i64 %.2, 2
  %45 = add nsw i64 %44, -8
  %46 = tail call i8* @memset(i8* %43, i32 1, i64 %45) #3
  %47 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockIndex.0.lcssa2.i
  store i8 2, i8* %47, align 1, !tbaa !5
  br label %51

; <label>:48                                      ; preds = %.preheader._crit_edge.i.10
  %49 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockIndex.0.lcssa2.i
  store i8 2, i8* %49, align 1, !tbaa !5
  %50 = icmp ugt i64 %.2, 1
  br i1 %50, label %51, label %54

; <label>:51                                      ; preds = %48, %.thread.i.11
  %52 = add i64 %.lcssa4.i, -1
  %53 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %52
  store i8 4, i8* %53, align 1, !tbaa !5
  br label %_allocBlockSet.exit

; <label>:54                                      ; preds = %48
  store i8 6, i8* %49, align 1, !tbaa !5
  br label %_allocBlockSet.exit

_allocBlockSet.exit.loopexit:                     ; preds = %tailrecurse.backedge.i.3
  br label %_allocBlockSet.exit

_allocBlockSet.exit.loopexit50:                   ; preds = %.critedge.us.i
  br label %_allocBlockSet.exit

_allocBlockSet.exit:                              ; preds = %_allocBlockSet.exit.loopexit50, %_allocBlockSet.exit.loopexit, %7, %54, %51
  %bid.1 = phi i64 [ %blockIndex.0.lcssa2.i, %54 ], [ %blockIndex.0.lcssa2.i, %51 ], [ -1, %7 ], [ -1, %_allocBlockSet.exit.loopexit ], [ -1, %_allocBlockSet.exit.loopexit50 ]
  ret i64 %bid.1

tailrecurse.backedge.i.1:                         ; preds = %tailrecurse.backedge.i
  %55 = or i64 %blockIndex.0.i28, 2
  %56 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %55
  %57 = load i8, i8* %56, align 2, !tbaa !5
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %.preheader._crit_edge.i.10.loopexit, label %tailrecurse.backedge.i.2

tailrecurse.backedge.i.2:                         ; preds = %tailrecurse.backedge.i.1
  %59 = or i64 %blockIndex.0.i28, 3
  %60 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1, !tbaa !5
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %.preheader._crit_edge.i.10.loopexit, label %tailrecurse.backedge.i.3

tailrecurse.backedge.i.3:                         ; preds = %tailrecurse.backedge.i.2
  %63 = add nsw i64 %blockIndex.0.i28, 4
  %64 = icmp ult i64 %63, 2097152
  br i1 %64, label %tailrecurse.i.9.preheader, label %_allocBlockSet.exit.loopexit
}

; Function Attrs: noredzone nounwind readonly uwtable
define i8* @Balloc_GetBaseAddress(i64 %blockID) #2 {
  %baseLoc.01 = load i64, i64* bitcast (i8** @_smallH_Loc to i64*), align 8
  %1 = shl i64 %blockID, 5
  %2 = add i64 %baseLoc.01, %1
  %3 = inttoptr i64 %2 to i8*
  ret i8* %3
}

; Function Attrs: noredzone nounwind readonly uwtable
define i64 @Balloc_GetUID(i8* %baseAddress) #2 {
  %1 = ptrtoint i8* %baseAddress to i64
  %2 = load i64, i64* bitcast (i8** @_smallH_Loc to i64*), align 8, !tbaa !1
  %3 = icmp uge i64 %1, %2
  %4 = add i64 %2, 67108864
  %5 = icmp ult i64 %1, %4
  %or.cond2 = and i1 %3, %5
  %6 = sub i64 %1, %2
  %7 = lshr i64 %6, 5
  %.0 = select i1 %or.cond2, i64 %7, i64 -1
  ret i64 %.0
}

; Function Attrs: noredzone nounwind uwtable
define void @Balloc_Free(i64 %blockID) #0 {
  %1 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockID
  %2 = load i8, i8* %1, align 1, !tbaa !5
  %3 = and i8 %2, 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %.loopexit, label %.preheader.preheader

.preheader.preheader:                             ; preds = %0
  %5 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %blockID
  %6 = and i8 %2, 4
  %7 = icmp eq i8 %6, 0
  store i8 0, i8* %5, align 1, !tbaa !5
  br i1 %7, label %._crit_edge.preheader, label %.loopexit

._crit_edge.preheader:                            ; preds = %.preheader.preheader
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.preheader, %._crit_edge
  %.in = phi i64 [ %8, %._crit_edge ], [ %blockID, %._crit_edge.preheader ]
  %8 = add i64 %.in, 1
  %.phi.trans.insert = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %8
  %.pre = load i8, i8* %.phi.trans.insert, align 1, !tbaa !5
  %9 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* @_smallH_Blocks, i64 0, i64 %8
  %10 = and i8 %.pre, 4
  %11 = icmp eq i8 %10, 0
  store i8 0, i8* %9, align 1, !tbaa !5
  br i1 %11, label %._crit_edge, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %._crit_edge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader.preheader, %0
  ret void
}

attributes #0 = { noredzone nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noredzone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noredzone nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512pf,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin noredzone nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
